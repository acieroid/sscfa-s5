// Expected: 120. or NumT
{%defineGlobalVar(%context,
                  "fib");
 {let (%fobj16 = let (%prototype14 = {[#proto: %ObjectProto,
                                       #class: "Object",
                                       #extensible: true,]
                                      'constructor' : {#value (undefined) ,
                                                       #writable true ,
                                                       #configurable false}})
                 let (%parent = %context)
                 let (%thisfunc15 = {[#proto: %FunctionProto,
                                      #code: func(%this , %args)
                                             {%args[delete "%new"];
                                              label %ret :
                                              {let (%this = %resolveThis
                                                              (#strict,
                                                               %this))
                                               let (%context = let (%n4 = %args
                                                                    ["0" , null])
                                                               {[#proto: %parent,
                                                                 #class: "Object",
                                                                 #extensible: true,]
                                                                'arguments' : {#value (%args) ,
                                                                    #writable true ,
                                                                    #configurable false},
                                                                'n' : {#getter func
                                                                    (this , args)
                                                                    {label %ret :
                                                                    {break %ret %n4}} ,
                                                                    #setter func
                                                                    (this , args)
                                                                    {label %ret :
                                                                    {break %ret %n4 := args
                                                                    ["0" , {[#proto: %ArrayProto,
                                                                    #class: "Array",
                                                                    #extensible: true,]}]}}}})
                                               {if (%ToBoolean(%EqEq(%context
                                                                    ["n" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}],
                                                                    0.)))
                                                   {let ($retval = 1.)
                                                    break %ret $retval}
                                                   else
                                                   {let ($retval = %PrimMultOp
                                                                    (%context
                                                                    ["n" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}],
                                                                    let (%fun12 = %context
                                                                    ["fib" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}])
                                                                    let (%ftype13 = prim
                                                                    ("typeof", %fun12))
                                                                    if (prim
                                                                    ("!", prim
                                                                    ("stx=", %ftype13 , "function")))
                                                                    {%TypeError
                                                                    ("Not a function")}
                                                                    else
                                                                    {%fun12
                                                                    (undefined,
                                                                    %mkArgsObj
                                                                    ({[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]
                                                                    '0' : {#value (%PrimSub
                                                                    (%context
                                                                    ["n" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}],
                                                                    1.)) ,
                                                                    #writable true ,
                                                                    #configurable true}}))},
                                                                    func
                                                                    (%a7 , %b8)
                                                                    {prim
                                                                    ("*", %a7 , %b8)}))
                                                    break %ret $retval};
                                                undefined}}},
                                      #class: "Function",
                                      #extensible: true,]
                                     'prototype' : {#value (%prototype14) ,
                                                    #writable true ,
                                                    #configurable true},
                                     'length' : {#value (1.) ,
                                                 #writable true ,
                                                 #configurable true},
                                     'caller' : {#getter %ThrowTypeError ,
                                                 #setter %ThrowTypeError},
                                     'arguments' : {#getter %ThrowTypeError ,
                                                    #setter %ThrowTypeError}})
                 {%prototype14["constructor" = %thisfunc15 , null];
                  %thisfunc15})
  %context["fib" = %fobj16 ,
           {[#proto: null, #class: "Object", #extensible: true,]
            '0' : {#value (%fobj16) , #writable true , #configurable true}}];
  let (%fun2 = %context["fib" , {[#proto: null,
                                  #class: "Object",
                                  #extensible: true,]}])
  let (%ftype3 = prim("typeof", %fun2))
  if (prim("!", prim("stx=", %ftype3 , "function")))
     {%TypeError("Not a function")}
     else
     {%fun2(undefined,
            %mkArgsObj({[#proto: null, #class: "Object", #extensible: true,]
                        '0' : {#value (5.) ,
                               #writable true ,
                               #configurable true}}))}}}
