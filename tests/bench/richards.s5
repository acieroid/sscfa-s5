  {let (%fobj433 = let (%prototype431 = {[#proto: %ObjectProto,
                                          #class: "Object",
                                          #extensible: true,]
                                         'constructor' : {#value (undefined) ,
                                                          #writable true ,
                                                          #configurable false}})
                   let (%parent = %context)
                   let (%thisfunc432 = {[#proto: %FunctionProto,
                                         #code: func(%this , %args)
                                                {%args[delete "%new"];
                                                 label %ret :
                                                 {let (%this = %resolveThis
                                                                 (#strict,
                                                                  %this))
                                                  let (%context = let (%scheduler352 = undefined)
                                                                  let (%queue353 = undefined)
                                                                  let (%msg354 = undefined)
                                                                  {[#proto: %parent,
                                                                    #class: "Object",
                                                                    #extensible: true,]
                                                                   'arguments' : {#value (%args) ,
                                                                    #writable true ,
                                                                    #configurable false},
                                                                   'msg' : {#getter func
                                                                    (this , args)
                                                                    {label %ret :
                                                                    {break %ret %msg354}} ,
                                                                    #setter func
                                                                    (this , args)
                                                                    {label %ret :
                                                                    {break %ret %msg354 := args
                                                                    ["0" , {[#proto: %ArrayProto,
                                                                    #class: "Array",
                                                                    #extensible: true,]}]}}},
                                                                   'queue' : {#getter func
                                                                    (this , args)
                                                                    {label %ret :
                                                                    {break %ret %queue353}} ,
                                                                    #setter func
                                                                    (this , args)
                                                                    {label %ret :
                                                                    {break %ret %queue353 := args
                                                                    ["0" , {[#proto: %ArrayProto,
                                                                    #class: "Array",
                                                                    #extensible: true,]}]}}},
                                                                   'scheduler' : {#getter func
                                                                    (this , args)
                                                                    {label %ret :
                                                                    {break %ret %scheduler352}} ,
                                                                    #setter func
                                                                    (this , args)
                                                                    {label %ret :
                                                                    {break %ret %scheduler352 := args
                                                                    ["0" , {[#proto: %ArrayProto,
                                                                    #class: "Array",
                                                                    #extensible: true,]}]}}}})
                                                  {%EnvCheckAssign(%context,
                                                                   "scheduler",
                                                                   let (%constr427 = %context
                                                                    ["Scheduler" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}])
                                                                   if (prim
                                                                    ("!", prim
                                                                    ("stx=", prim
                                                                    ("typeof", %constr427) , "function")))
                                                                    {%TypeError
                                                                    ("Constructor was not a function")}
                                                                    else
                                                                    {let (%cproto428 = %constr427
                                                                    ["prototype" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}])
                                                                    let (%cproto428 = if (%IsObject
                                                                    (%cproto428))
                                                                    {%cproto428}
                                                                    else
                                                                    {%ObjectProto})
                                                                    {if (prim
                                                                    ("!", %IsObject
                                                                    (%cproto428)))
                                                                    {%cproto428 := %ObjectProto}
                                                                    else
                                                                    {undefined};
                                                                    let (%newobj429 = {[#proto: %cproto428,
                                                                    #class: "Object",
                                                                    #extensible: true,]})
                                                                    if (prim
                                                                    ("stx=", %constr427
                                                                    [<#code>] , null))
                                                                    {%TypeError
                                                                    ("Constructor was not applicable")}
                                                                    else
                                                                    {let (%constr_ret430 = %constr427
                                                                    (%newobj429,
                                                                    %mkNewArgsObj
                                                                    ({[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]})))
                                                                    if (%IsObject
                                                                    (%constr_ret430))
                                                                    {%constr_ret430}
                                                                    else
                                                                    {%newobj429}}}},
                                                                   #strict);
                                                   let (%obj424 = %context
                                                                    ["scheduler" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}])
                                                   let (%fun425 = %ToObject
                                                                    (%obj424)
                                                                    ["addIdleTask" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}])
                                                   let (%ftype426 = prim
                                                                    ("typeof", %fun425))
                                                   if (prim("!", prim
                                                                   ("stx=", %ftype426 , "function")))
                                                      {%TypeError("Not a function")}
                                                      else
                                                      {%fun425(%ToObject
                                                                 (%obj424),
                                                               %mkArgsObj
                                                                 ({[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]
                                                                   '0' : {#value (%context
                                                                    ["ID_IDLE" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}]) ,
                                                                    #writable true ,
                                                                    #configurable true},
                                                                   '1' : {#value (0.) ,
                                                                    #writable true ,
                                                                    #configurable true},
                                                                   '2' : {#value (null) ,
                                                                    #writable true ,
                                                                    #configurable true},
                                                                   '3' : {#value (%context
                                                                    ["COUNT" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}]) ,
                                                                    #writable true ,
                                                                    #configurable true}}))};
                                                   %EnvCheckAssign(%context,
                                                                   "queue",
                                                                   let (%constr420 = %context
                                                                    ["Packet" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}])
                                                                   if (prim
                                                                    ("!", prim
                                                                    ("stx=", prim
                                                                    ("typeof", %constr420) , "function")))
                                                                    {%TypeError
                                                                    ("Constructor was not a function")}
                                                                    else
                                                                    {let (%cproto421 = %constr420
                                                                    ["prototype" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}])
                                                                    let (%cproto421 = if (%IsObject
                                                                    (%cproto421))
                                                                    {%cproto421}
                                                                    else
                                                                    {%ObjectProto})
                                                                    {if (prim
                                                                    ("!", %IsObject
                                                                    (%cproto421)))
                                                                    {%cproto421 := %ObjectProto}
                                                                    else
                                                                    {undefined};
                                                                    let (%newobj422 = {[#proto: %cproto421,
                                                                    #class: "Object",
                                                                    #extensible: true,]})
                                                                    if (prim
                                                                    ("stx=", %constr420
                                                                    [<#code>] , null))
                                                                    {%TypeError
                                                                    ("Constructor was not applicable")}
                                                                    else
                                                                    {let (%constr_ret423 = %constr420
                                                                    (%newobj422,
                                                                    %mkNewArgsObj
                                                                    ({[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]
                                                                    '0' : {#value (null) ,
                                                                    #writable true ,
                                                                    #configurable true},
                                                                    '1' : {#value (%context
                                                                    ["ID_WORKER" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}]) ,
                                                                    #writable true ,
                                                                    #configurable true},
                                                                    '2' : {#value (%context
                                                                    ["KIND_WORK" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}]) ,
                                                                    #writable true ,
                                                                    #configurable true}})))
                                                                    if (%IsObject
                                                                    (%constr_ret423))
                                                                    {%constr_ret423}
                                                                    else
                                                                    {%newobj422}}}},
                                                                   #strict);
                                                   %EnvCheckAssign(%context,
                                                                   "queue",
                                                                   let (%constr416 = %context
                                                                    ["Packet" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}])
                                                                   if (prim
                                                                    ("!", prim
                                                                    ("stx=", prim
                                                                    ("typeof", %constr416) , "function")))
                                                                    {%TypeError
                                                                    ("Constructor was not a function")}
                                                                    else
                                                                    {let (%cproto417 = %constr416
                                                                    ["prototype" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}])
                                                                    let (%cproto417 = if (%IsObject
                                                                    (%cproto417))
                                                                    {%cproto417}
                                                                    else
                                                                    {%ObjectProto})
                                                                    {if (prim
                                                                    ("!", %IsObject
                                                                    (%cproto417)))
                                                                    {%cproto417 := %ObjectProto}
                                                                    else
                                                                    {undefined};
                                                                    let (%newobj418 = {[#proto: %cproto417,
                                                                    #class: "Object",
                                                                    #extensible: true,]})
                                                                    if (prim
                                                                    ("stx=", %constr416
                                                                    [<#code>] , null))
                                                                    {%TypeError
                                                                    ("Constructor was not applicable")}
                                                                    else
                                                                    {let (%constr_ret419 = %constr416
                                                                    (%newobj418,
                                                                    %mkNewArgsObj
                                                                    ({[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]
                                                                    '0' : {#value (%context
                                                                    ["queue" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}]) ,
                                                                    #writable true ,
                                                                    #configurable true},
                                                                    '1' : {#value (%context
                                                                    ["ID_WORKER" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}]) ,
                                                                    #writable true ,
                                                                    #configurable true},
                                                                    '2' : {#value (%context
                                                                    ["KIND_WORK" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}]) ,
                                                                    #writable true ,
                                                                    #configurable true}})))
                                                                    if (%IsObject
                                                                    (%constr_ret419))
                                                                    {%constr_ret419}
                                                                    else
                                                                    {%newobj418}}}},
                                                                   #strict);
                                                   let (%obj413 = %context
                                                                    ["scheduler" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}])
                                                   let (%fun414 = %ToObject
                                                                    (%obj413)
                                                                    ["addWorkerTask" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}])
                                                   let (%ftype415 = prim
                                                                    ("typeof", %fun414))
                                                   if (prim("!", prim
                                                                   ("stx=", %ftype415 , "function")))
                                                      {%TypeError("Not a function")}
                                                      else
                                                      {%fun414(%ToObject
                                                                 (%obj413),
                                                               %mkArgsObj
                                                                 ({[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]
                                                                   '0' : {#value (%context
                                                                    ["ID_WORKER" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}]) ,
                                                                    #writable true ,
                                                                    #configurable true},
                                                                   '1' : {#value (1000.) ,
                                                                    #writable true ,
                                                                    #configurable true},
                                                                   '2' : {#value (%context
                                                                    ["queue" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}]) ,
                                                                    #writable true ,
                                                                    #configurable true}}))};
                                                   %EnvCheckAssign(%context,
                                                                   "queue",
                                                                   let (%constr409 = %context
                                                                    ["Packet" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}])
                                                                   if (prim
                                                                    ("!", prim
                                                                    ("stx=", prim
                                                                    ("typeof", %constr409) , "function")))
                                                                    {%TypeError
                                                                    ("Constructor was not a function")}
                                                                    else
                                                                    {let (%cproto410 = %constr409
                                                                    ["prototype" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}])
                                                                    let (%cproto410 = if (%IsObject
                                                                    (%cproto410))
                                                                    {%cproto410}
                                                                    else
                                                                    {%ObjectProto})
                                                                    {if (prim
                                                                    ("!", %IsObject
                                                                    (%cproto410)))
                                                                    {%cproto410 := %ObjectProto}
                                                                    else
                                                                    {undefined};
                                                                    let (%newobj411 = {[#proto: %cproto410,
                                                                    #class: "Object",
                                                                    #extensible: true,]})
                                                                    if (prim
                                                                    ("stx=", %constr409
                                                                    [<#code>] , null))
                                                                    {%TypeError
                                                                    ("Constructor was not applicable")}
                                                                    else
                                                                    {let (%constr_ret412 = %constr409
                                                                    (%newobj411,
                                                                    %mkNewArgsObj
                                                                    ({[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]
                                                                    '0' : {#value (null) ,
                                                                    #writable true ,
                                                                    #configurable true},
                                                                    '1' : {#value (%context
                                                                    ["ID_DEVICE_A" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}]) ,
                                                                    #writable true ,
                                                                    #configurable true},
                                                                    '2' : {#value (%context
                                                                    ["KIND_DEVICE" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}]) ,
                                                                    #writable true ,
                                                                    #configurable true}})))
                                                                    if (%IsObject
                                                                    (%constr_ret412))
                                                                    {%constr_ret412}
                                                                    else
                                                                    {%newobj411}}}},
                                                                   #strict);
                                                   %EnvCheckAssign(%context,
                                                                   "queue",
                                                                   let (%constr405 = %context
                                                                    ["Packet" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}])
                                                                   if (prim
                                                                    ("!", prim
                                                                    ("stx=", prim
                                                                    ("typeof", %constr405) , "function")))
                                                                    {%TypeError
                                                                    ("Constructor was not a function")}
                                                                    else
                                                                    {let (%cproto406 = %constr405
                                                                    ["prototype" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}])
                                                                    let (%cproto406 = if (%IsObject
                                                                    (%cproto406))
                                                                    {%cproto406}
                                                                    else
                                                                    {%ObjectProto})
                                                                    {if (prim
                                                                    ("!", %IsObject
                                                                    (%cproto406)))
                                                                    {%cproto406 := %ObjectProto}
                                                                    else
                                                                    {undefined};
                                                                    let (%newobj407 = {[#proto: %cproto406,
                                                                    #class: "Object",
                                                                    #extensible: true,]})
                                                                    if (prim
                                                                    ("stx=", %constr405
                                                                    [<#code>] , null))
                                                                    {%TypeError
                                                                    ("Constructor was not applicable")}
                                                                    else
                                                                    {let (%constr_ret408 = %constr405
                                                                    (%newobj407,
                                                                    %mkNewArgsObj
                                                                    ({[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]
                                                                    '0' : {#value (%context
                                                                    ["queue" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}]) ,
                                                                    #writable true ,
                                                                    #configurable true},
                                                                    '1' : {#value (%context
                                                                    ["ID_DEVICE_A" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}]) ,
                                                                    #writable true ,
                                                                    #configurable true},
                                                                    '2' : {#value (%context
                                                                    ["KIND_DEVICE" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}]) ,
                                                                    #writable true ,
                                                                    #configurable true}})))
                                                                    if (%IsObject
                                                                    (%constr_ret408))
                                                                    {%constr_ret408}
                                                                    else
                                                                    {%newobj407}}}},
                                                                   #strict);
                                                   %EnvCheckAssign(%context,
                                                                   "queue",
                                                                   let (%constr401 = %context
                                                                    ["Packet" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}])
                                                                   if (prim
                                                                    ("!", prim
                                                                    ("stx=", prim
                                                                    ("typeof", %constr401) , "function")))
                                                                    {%TypeError
                                                                    ("Constructor was not a function")}
                                                                    else
                                                                    {let (%cproto402 = %constr401
                                                                    ["prototype" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}])
                                                                    let (%cproto402 = if (%IsObject
                                                                    (%cproto402))
                                                                    {%cproto402}
                                                                    else
                                                                    {%ObjectProto})
                                                                    {if (prim
                                                                    ("!", %IsObject
                                                                    (%cproto402)))
                                                                    {%cproto402 := %ObjectProto}
                                                                    else
                                                                    {undefined};
                                                                    let (%newobj403 = {[#proto: %cproto402,
                                                                    #class: "Object",
                                                                    #extensible: true,]})
                                                                    if (prim
                                                                    ("stx=", %constr401
                                                                    [<#code>] , null))
                                                                    {%TypeError
                                                                    ("Constructor was not applicable")}
                                                                    else
                                                                    {let (%constr_ret404 = %constr401
                                                                    (%newobj403,
                                                                    %mkNewArgsObj
                                                                    ({[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]
                                                                    '0' : {#value (%context
                                                                    ["queue" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}]) ,
                                                                    #writable true ,
                                                                    #configurable true},
                                                                    '1' : {#value (%context
                                                                    ["ID_DEVICE_A" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}]) ,
                                                                    #writable true ,
                                                                    #configurable true},
                                                                    '2' : {#value (%context
                                                                    ["KIND_DEVICE" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}]) ,
                                                                    #writable true ,
                                                                    #configurable true}})))
                                                                    if (%IsObject
                                                                    (%constr_ret404))
                                                                    {%constr_ret404}
                                                                    else
                                                                    {%newobj403}}}},
                                                                   #strict);
                                                   let (%obj398 = %context
                                                                    ["scheduler" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}])
                                                   let (%fun399 = %ToObject
                                                                    (%obj398)
                                                                    ["addHandlerTask" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}])
                                                   let (%ftype400 = prim
                                                                    ("typeof", %fun399))
                                                   if (prim("!", prim
                                                                   ("stx=", %ftype400 , "function")))
                                                      {%TypeError("Not a function")}
                                                      else
                                                      {%fun399(%ToObject
                                                                 (%obj398),
                                                               %mkArgsObj
                                                                 ({[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]
                                                                   '0' : {#value (%context
                                                                    ["ID_HANDLER_A" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}]) ,
                                                                    #writable true ,
                                                                    #configurable true},
                                                                   '1' : {#value (2000.) ,
                                                                    #writable true ,
                                                                    #configurable true},
                                                                   '2' : {#value (%context
                                                                    ["queue" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}]) ,
                                                                    #writable true ,
                                                                    #configurable true}}))};
                                                   %EnvCheckAssign(%context,
                                                                   "queue",
                                                                   let (%constr394 = %context
                                                                    ["Packet" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}])
                                                                   if (prim
                                                                    ("!", prim
                                                                    ("stx=", prim
                                                                    ("typeof", %constr394) , "function")))
                                                                    {%TypeError
                                                                    ("Constructor was not a function")}
                                                                    else
                                                                    {let (%cproto395 = %constr394
                                                                    ["prototype" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}])
                                                                    let (%cproto395 = if (%IsObject
                                                                    (%cproto395))
                                                                    {%cproto395}
                                                                    else
                                                                    {%ObjectProto})
                                                                    {if (prim
                                                                    ("!", %IsObject
                                                                    (%cproto395)))
                                                                    {%cproto395 := %ObjectProto}
                                                                    else
                                                                    {undefined};
                                                                    let (%newobj396 = {[#proto: %cproto395,
                                                                    #class: "Object",
                                                                    #extensible: true,]})
                                                                    if (prim
                                                                    ("stx=", %constr394
                                                                    [<#code>] , null))
                                                                    {%TypeError
                                                                    ("Constructor was not applicable")}
                                                                    else
                                                                    {let (%constr_ret397 = %constr394
                                                                    (%newobj396,
                                                                    %mkNewArgsObj
                                                                    ({[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]
                                                                    '0' : {#value (null) ,
                                                                    #writable true ,
                                                                    #configurable true},
                                                                    '1' : {#value (%context
                                                                    ["ID_DEVICE_B" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}]) ,
                                                                    #writable true ,
                                                                    #configurable true},
                                                                    '2' : {#value (%context
                                                                    ["KIND_DEVICE" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}]) ,
                                                                    #writable true ,
                                                                    #configurable true}})))
                                                                    if (%IsObject
                                                                    (%constr_ret397))
                                                                    {%constr_ret397}
                                                                    else
                                                                    {%newobj396}}}},
                                                                   #strict);
                                                   %EnvCheckAssign(%context,
                                                                   "queue",
                                                                   let (%constr390 = %context
                                                                    ["Packet" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}])
                                                                   if (prim
                                                                    ("!", prim
                                                                    ("stx=", prim
                                                                    ("typeof", %constr390) , "function")))
                                                                    {%TypeError
                                                                    ("Constructor was not a function")}
                                                                    else
                                                                    {let (%cproto391 = %constr390
                                                                    ["prototype" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}])
                                                                    let (%cproto391 = if (%IsObject
                                                                    (%cproto391))
                                                                    {%cproto391}
                                                                    else
                                                                    {%ObjectProto})
                                                                    {if (prim
                                                                    ("!", %IsObject
                                                                    (%cproto391)))
                                                                    {%cproto391 := %ObjectProto}
                                                                    else
                                                                    {undefined};
                                                                    let (%newobj392 = {[#proto: %cproto391,
                                                                    #class: "Object",
                                                                    #extensible: true,]})
                                                                    if (prim
                                                                    ("stx=", %constr390
                                                                    [<#code>] , null))
                                                                    {%TypeError
                                                                    ("Constructor was not applicable")}
                                                                    else
                                                                    {let (%constr_ret393 = %constr390
                                                                    (%newobj392,
                                                                    %mkNewArgsObj
                                                                    ({[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]
                                                                    '0' : {#value (%context
                                                                    ["queue" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}]) ,
                                                                    #writable true ,
                                                                    #configurable true},
                                                                    '1' : {#value (%context
                                                                    ["ID_DEVICE_B" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}]) ,
                                                                    #writable true ,
                                                                    #configurable true},
                                                                    '2' : {#value (%context
                                                                    ["KIND_DEVICE" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}]) ,
                                                                    #writable true ,
                                                                    #configurable true}})))
                                                                    if (%IsObject
                                                                    (%constr_ret393))
                                                                    {%constr_ret393}
                                                                    else
                                                                    {%newobj392}}}},
                                                                   #strict);
                                                   %EnvCheckAssign(%context,
                                                                   "queue",
                                                                   let (%constr386 = %context
                                                                    ["Packet" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}])
                                                                   if (prim
                                                                    ("!", prim
                                                                    ("stx=", prim
                                                                    ("typeof", %constr386) , "function")))
                                                                    {%TypeError
                                                                    ("Constructor was not a function")}
                                                                    else
                                                                    {let (%cproto387 = %constr386
                                                                    ["prototype" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}])
                                                                    let (%cproto387 = if (%IsObject
                                                                    (%cproto387))
                                                                    {%cproto387}
                                                                    else
                                                                    {%ObjectProto})
                                                                    {if (prim
                                                                    ("!", %IsObject
                                                                    (%cproto387)))
                                                                    {%cproto387 := %ObjectProto}
                                                                    else
                                                                    {undefined};
                                                                    let (%newobj388 = {[#proto: %cproto387,
                                                                    #class: "Object",
                                                                    #extensible: true,]})
                                                                    if (prim
                                                                    ("stx=", %constr386
                                                                    [<#code>] , null))
                                                                    {%TypeError
                                                                    ("Constructor was not applicable")}
                                                                    else
                                                                    {let (%constr_ret389 = %constr386
                                                                    (%newobj388,
                                                                    %mkNewArgsObj
                                                                    ({[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]
                                                                    '0' : {#value (%context
                                                                    ["queue" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}]) ,
                                                                    #writable true ,
                                                                    #configurable true},
                                                                    '1' : {#value (%context
                                                                    ["ID_DEVICE_B" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}]) ,
                                                                    #writable true ,
                                                                    #configurable true},
                                                                    '2' : {#value (%context
                                                                    ["KIND_DEVICE" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}]) ,
                                                                    #writable true ,
                                                                    #configurable true}})))
                                                                    if (%IsObject
                                                                    (%constr_ret389))
                                                                    {%constr_ret389}
                                                                    else
                                                                    {%newobj388}}}},
                                                                   #strict);
                                                   let (%obj383 = %context
                                                                    ["scheduler" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}])
                                                   let (%fun384 = %ToObject
                                                                    (%obj383)
                                                                    ["addHandlerTask" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}])
                                                   let (%ftype385 = prim
                                                                    ("typeof", %fun384))
                                                   if (prim("!", prim
                                                                   ("stx=", %ftype385 , "function")))
                                                      {%TypeError("Not a function")}
                                                      else
                                                      {%fun384(%ToObject
                                                                 (%obj383),
                                                               %mkArgsObj
                                                                 ({[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]
                                                                   '0' : {#value (%context
                                                                    ["ID_HANDLER_B" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}]) ,
                                                                    #writable true ,
                                                                    #configurable true},
                                                                   '1' : {#value (3000.) ,
                                                                    #writable true ,
                                                                    #configurable true},
                                                                   '2' : {#value (%context
                                                                    ["queue" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}]) ,
                                                                    #writable true ,
                                                                    #configurable true}}))};
                                                   let (%obj380 = %context
                                                                    ["scheduler" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}])
                                                   let (%fun381 = %ToObject
                                                                    (%obj380)
                                                                    ["addDeviceTask" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}])
                                                   let (%ftype382 = prim
                                                                    ("typeof", %fun381))
                                                   if (prim("!", prim
                                                                   ("stx=", %ftype382 , "function")))
                                                      {%TypeError("Not a function")}
                                                      else
                                                      {%fun381(%ToObject
                                                                 (%obj380),
                                                               %mkArgsObj
                                                                 ({[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]
                                                                   '0' : {#value (%context
                                                                    ["ID_DEVICE_A" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}]) ,
                                                                    #writable true ,
                                                                    #configurable true},
                                                                   '1' : {#value (4000.) ,
                                                                    #writable true ,
                                                                    #configurable true},
                                                                   '2' : {#value (null) ,
                                                                    #writable true ,
                                                                    #configurable true}}))};
                                                   let (%obj377 = %context
                                                                    ["scheduler" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}])
                                                   let (%fun378 = %ToObject
                                                                    (%obj377)
                                                                    ["addDeviceTask" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}])
                                                   let (%ftype379 = prim
                                                                    ("typeof", %fun378))
                                                   if (prim("!", prim
                                                                   ("stx=", %ftype379 , "function")))
                                                      {%TypeError("Not a function")}
                                                      else
                                                      {%fun378(%ToObject
                                                                 (%obj377),
                                                               %mkArgsObj
                                                                 ({[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]
                                                                   '0' : {#value (%context
                                                                    ["ID_DEVICE_B" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}]) ,
                                                                    #writable true ,
                                                                    #configurable true},
                                                                   '1' : {#value (5000.) ,
                                                                    #writable true ,
                                                                    #configurable true},
                                                                   '2' : {#value (null) ,
                                                                    #writable true ,
                                                                    #configurable true}}))};
                                                   let (%obj374 = %context
                                                                    ["scheduler" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}])
                                                   let (%fun375 = %ToObject
                                                                    (%obj374)
                                                                    ["schedule" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}])
                                                   let (%ftype376 = prim
                                                                    ("typeof", %fun375))
                                                   if (prim("!", prim
                                                                   ("stx=", %ftype376 , "function")))
                                                      {%TypeError("Not a function")}
                                                      else
                                                      {%fun375(%ToObject
                                                                 (%obj374),
                                                               %mkArgsObj
                                                                 ({[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}))};
                                                   if (%ToBoolean(let (%l-evaled361 = prim
                                                                    ("!", %EqEq
                                                                    (%PropAccessorCheck
                                                                    (%context
                                                                    ["scheduler" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}])
                                                                    ["queueCount" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}],
                                                                    %context
                                                                    ["EXPECTED_QUEUE_COUNT" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}])))
                                                                  if (%ToBoolean
                                                                    (%l-evaled361))
                                                                    {%l-evaled361}
                                                                    else
                                                                    {prim
                                                                    ("!", %EqEq
                                                                    (%PropAccessorCheck
                                                                    (%context
                                                                    ["scheduler" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}])
                                                                    ["holdCount" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}],
                                                                    %context
                                                                    ["EXPECTED_HOLD_COUNT" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}]))}))
                                                      {%EnvCheckAssign
                                                         (%context,
                                                          "msg",
                                                          %PrimAdd(%PrimAdd
                                                                    (%PrimAdd
                                                                    (%PrimAdd
                                                                    ("Error during execution: queueCount = ",
                                                                    %PropAccessorCheck
                                                                    (%context
                                                                    ["scheduler" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}])
                                                                    ["queueCount" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}]),
                                                                    ", holdCount = "),
                                                                    %PropAccessorCheck
                                                                    (%context
                                                                    ["scheduler" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}])
                                                                    ["holdCount" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}]),
                                                                   "."),
                                                          #strict);
                                                       throw {[#proto: null,
                                                               #class: "Object",
                                                               #extensible: true,]
                                                              '%js-exn' : {#value (let (%constr362 = %context
                                                                    ["Error" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}])
                                                                    if (prim
                                                                    ("!", prim
                                                                    ("stx=", prim
                                                                    ("typeof", %constr362) , "function")))
                                                                    {%TypeError
                                                                    ("Constructor was not a function")}
                                                                    else
                                                                    {let (%cproto363 = %constr362
                                                                    ["prototype" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}])
                                                                    let (%cproto363 = if (%IsObject
                                                                    (%cproto363))
                                                                    {%cproto363}
                                                                    else
                                                                    {%ObjectProto})
                                                                    {if (prim
                                                                    ("!", %IsObject
                                                                    (%cproto363)))
                                                                    {%cproto363 := %ObjectProto}
                                                                    else
                                                                    {undefined};
                                                                    let (%newobj364 = {[#proto: %cproto363,
                                                                    #class: "Object",
                                                                    #extensible: true,]})
                                                                    if (prim
                                                                    ("stx=", %constr362
                                                                    [<#code>] , null))
                                                                    {%TypeError
                                                                    ("Constructor was not applicable")}
                                                                    else
                                                                    {let (%constr_ret365 = %constr362
                                                                    (%newobj364,
                                                                    %mkNewArgsObj
                                                                    ({[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]
                                                                    '0' : {#value (%context
                                                                    ["msg" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}]) ,
                                                                    #writable true ,
                                                                    #configurable true}})))
                                                                    if (%IsObject
                                                                    (%constr_ret365))
                                                                    {%constr_ret365}
                                                                    else
                                                                    {%newobj364}}}}) ,
                                                                    #writable false ,
                                                                    #configurable false}}}
                                                      else
                                                      {undefined};
                                                   undefined}}},
                                         #class: "Function",
                                         #extensible: true,]
                                        'prototype' : {#value (%prototype431) ,
                                                       #writable true ,
                                                       #configurable true},
                                        'length' : {#value (0.) ,
                                                    #writable true ,
                                                    #configurable true},
                                        'caller' : {#getter %ThrowTypeError ,
                                                    #setter %ThrowTypeError},
                                        'arguments' : {#getter %ThrowTypeError ,
                                                       #setter %ThrowTypeError}})
                   {%prototype431["constructor" = %thisfunc432 , null];
                    %thisfunc432})
   %context["runRichards" = %fobj433 ,
            {[#proto: null, #class: "Object", #extensible: true,]
             '0' : {#value (%fobj433) , #writable true , #configurable true}}];
   let (%fobj351 = let (%prototype349 = {[#proto: %ObjectProto,
                                          #class: "Object",
                                          #extensible: true,]
                                         'constructor' : {#value (undefined) ,
                                                          #writable true ,
                                                          #configurable false}})
                   let (%parent = %context)
                   let (%thisfunc350 = {[#proto: %FunctionProto,
                                         #code: func(%this , %args)
                                                {%args[delete "%new"];
                                                 label %ret :
                                                 {let (%this = %resolveThis
                                                                 (#strict,
                                                                  %this))
                                                  let (%context = {[#proto: %parent,
                                                                    #class: "Object",
                                                                    #extensible: true,]
                                                                   'arguments' : {#value (%args) ,
                                                                    #writable true ,
                                                                    #configurable false}})
                                                  {try
                                                   {%set-property(%ToObject
                                                                    (%this),
                                                                  "queueCount",
                                                                  0.)}
                                                   catch
                                                   {%ErrorDispatch};
                                                   try
                                                   {%set-property(%ToObject
                                                                    (%this),
                                                                  "holdCount",
                                                                  0.)}
                                                   catch
                                                   {%ErrorDispatch};
                                                   try
                                                   {%set-property(%ToObject
                                                                    (%this),
                                                                  "blocks",
                                                                  let (%constr345 = %context
                                                                    ["Array" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}])
                                                                  if (prim
                                                                    ("!", prim
                                                                    ("stx=", prim
                                                                    ("typeof", %constr345) , "function")))
                                                                    {%TypeError
                                                                    ("Constructor was not a function")}
                                                                    else
                                                                    {let (%cproto346 = %constr345
                                                                    ["prototype" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}])
                                                                    let (%cproto346 = if (%IsObject
                                                                    (%cproto346))
                                                                    {%cproto346}
                                                                    else
                                                                    {%ObjectProto})
                                                                    {if (prim
                                                                    ("!", %IsObject
                                                                    (%cproto346)))
                                                                    {%cproto346 := %ObjectProto}
                                                                    else
                                                                    {undefined};
                                                                    let (%newobj347 = {[#proto: %cproto346,
                                                                    #class: "Object",
                                                                    #extensible: true,]})
                                                                    if (prim
                                                                    ("stx=", %constr345
                                                                    [<#code>] , null))
                                                                    {%TypeError
                                                                    ("Constructor was not applicable")}
                                                                    else
                                                                    {let (%constr_ret348 = %constr345
                                                                    (%newobj347,
                                                                    %mkNewArgsObj
                                                                    ({[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]
                                                                    '0' : {#value (%context
                                                                    ["NUMBER_OF_IDS" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}]) ,
                                                                    #writable true ,
                                                                    #configurable true}})))
                                                                    if (%IsObject
                                                                    (%constr_ret348))
                                                                    {%constr_ret348}
                                                                    else
                                                                    {%newobj347}}}})}
                                                   catch
                                                   {%ErrorDispatch};
                                                   try
                                                   {%set-property(%ToObject
                                                                    (%this),
                                                                  "list",
                                                                  null)}
                                                   catch
                                                   {%ErrorDispatch};
                                                   try
                                                   {%set-property(%ToObject
                                                                    (%this),
                                                                  "currentTcb",
                                                                  null)}
                                                   catch
                                                   {%ErrorDispatch};
                                                   try
                                                   {%set-property(%ToObject
                                                                    (%this),
                                                                  "currentId",
                                                                  null)}
                                                   catch
                                                   {%ErrorDispatch};
                                                   undefined}}},
                                         #class: "Function",
                                         #extensible: true,]
                                        'prototype' : {#value (%prototype349) ,
                                                       #writable true ,
                                                       #configurable true},
                                        'length' : {#value (0.) ,
                                                    #writable true ,
                                                    #configurable true},
                                        'caller' : {#getter %ThrowTypeError ,
                                                    #setter %ThrowTypeError},
                                        'arguments' : {#getter %ThrowTypeError ,
                                                       #setter %ThrowTypeError}})
                   {%prototype349["constructor" = %thisfunc350 , null];
                    %thisfunc350})
   %context["Scheduler" = %fobj351 ,
            {[#proto: null, #class: "Object", #extensible: true,]
             '0' : {#value (%fobj351) , #writable true , #configurable true}}];
   let (%fobj344 = let (%prototype342 = {[#proto: %ObjectProto,
                                          #class: "Object",
                                          #extensible: true,]
                                         'constructor' : {#value (undefined) ,
                                                          #writable true ,
                                                          #configurable false}})
                   let (%parent = %context)
                   let (%thisfunc343 = {[#proto: %FunctionProto,
                                         #code: func(%this , %args)
                                                {%args[delete "%new"];
                                                 label %ret :
                                                 {let (%this = %resolveThis
                                                                 (#strict,
                                                                  %this))
                                                  let (%context = let (%link335 = %args
                                                                    ["0" , null])
                                                                  let (%id336 = %args
                                                                    ["1" , null])
                                                                  let (%priority337 = %args
                                                                    ["2" , null])
                                                                  let (%queue338 = %args
                                                                    ["3" , null])
                                                                  let (%task339 = %args
                                                                    ["4" , null])
                                                                  {[#proto: %parent,
                                                                    #class: "Object",
                                                                    #extensible: true,]
                                                                   'arguments' : {#value (%args) ,
                                                                    #writable true ,
                                                                    #configurable false},
                                                                   'task' : {#getter func
                                                                    (this , args)
                                                                    {label %ret :
                                                                    {break %ret %task339}} ,
                                                                    #setter func
                                                                    (this , args)
                                                                    {label %ret :
                                                                    {break %ret %task339 := args
                                                                    ["0" , {[#proto: %ArrayProto,
                                                                    #class: "Array",
                                                                    #extensible: true,]}]}}},
                                                                   'queue' : {#getter func
                                                                    (this , args)
                                                                    {label %ret :
                                                                    {break %ret %queue338}} ,
                                                                    #setter func
                                                                    (this , args)
                                                                    {label %ret :
                                                                    {break %ret %queue338 := args
                                                                    ["0" , {[#proto: %ArrayProto,
                                                                    #class: "Array",
                                                                    #extensible: true,]}]}}},
                                                                   'priority' : {#getter func
                                                                    (this , args)
                                                                    {label %ret :
                                                                    {break %ret %priority337}} ,
                                                                    #setter func
                                                                    (this , args)
                                                                    {label %ret :
                                                                    {break %ret %priority337 := args
                                                                    ["0" , {[#proto: %ArrayProto,
                                                                    #class: "Array",
                                                                    #extensible: true,]}]}}},
                                                                   'id' : {#getter func
                                                                    (this , args)
                                                                    {label %ret :
                                                                    {break %ret %id336}} ,
                                                                    #setter func
                                                                    (this , args)
                                                                    {label %ret :
                                                                    {break %ret %id336 := args
                                                                    ["0" , {[#proto: %ArrayProto,
                                                                    #class: "Array",
                                                                    #extensible: true,]}]}}},
                                                                   'link' : {#getter func
                                                                    (this , args)
                                                                    {label %ret :
                                                                    {break %ret %link335}} ,
                                                                    #setter func
                                                                    (this , args)
                                                                    {label %ret :
                                                                    {break %ret %link335 := args
                                                                    ["0" , {[#proto: %ArrayProto,
                                                                    #class: "Array",
                                                                    #extensible: true,]}]}}}})
                                                  {try
                                                   {%set-property(%ToObject
                                                                    (%this),
                                                                  "link",
                                                                  %context
                                                                    ["link" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}])}
                                                   catch
                                                   {%ErrorDispatch};
                                                   try
                                                   {%set-property(%ToObject
                                                                    (%this),
                                                                  "id",
                                                                  %context
                                                                    ["id" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}])}
                                                   catch
                                                   {%ErrorDispatch};
                                                   try
                                                   {%set-property(%ToObject
                                                                    (%this),
                                                                  "priority",
                                                                  %context
                                                                    ["priority" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}])}
                                                   catch
                                                   {%ErrorDispatch};
                                                   try
                                                   {%set-property(%ToObject
                                                                    (%this),
                                                                  "queue",
                                                                  %context
                                                                    ["queue" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}])}
                                                   catch
                                                   {%ErrorDispatch};
                                                   try
                                                   {%set-property(%ToObject
                                                                    (%this),
                                                                  "task",
                                                                  %context
                                                                    ["task" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}])}
                                                   catch
                                                   {%ErrorDispatch};
                                                   if (%ToBoolean(%EqEq
                                                                    (%context
                                                                    ["queue" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}],
                                                                    null)))
                                                      {try
                                                       {%set-property
                                                         (%ToObject(%this),
                                                          "state",
                                                          %context["STATE_SUSPENDED" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}])}
                                                       catch
                                                       {%ErrorDispatch}}
                                                      else
                                                      {try
                                                       {%set-property
                                                         (%ToObject(%this),
                                                          "state",
                                                          %context["STATE_SUSPENDED_RUNNABLE" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}])}
                                                       catch
                                                       {%ErrorDispatch}};
                                                   undefined}}},
                                         #class: "Function",
                                         #extensible: true,]
                                        'prototype' : {#value (%prototype342) ,
                                                       #writable true ,
                                                       #configurable true},
                                        'length' : {#value (5.) ,
                                                    #writable true ,
                                                    #configurable true},
                                        'caller' : {#getter %ThrowTypeError ,
                                                    #setter %ThrowTypeError},
                                        'arguments' : {#getter %ThrowTypeError ,
                                                       #setter %ThrowTypeError}})
                   {%prototype342["constructor" = %thisfunc343 , null];
                    %thisfunc343})
   %context["TaskControlBlock" = %fobj344 ,
            {[#proto: null, #class: "Object", #extensible: true,]
             '0' : {#value (%fobj344) , #writable true , #configurable true}}];
   let (%fobj334 = let (%prototype332 = {[#proto: %ObjectProto,
                                          #class: "Object",
                                          #extensible: true,]
                                         'constructor' : {#value (undefined) ,
                                                          #writable true ,
                                                          #configurable false}})
                   let (%parent = %context)
                   let (%thisfunc333 = {[#proto: %FunctionProto,
                                         #code: func(%this , %args)
                                                {%args[delete "%new"];
                                                 label %ret :
                                                 {let (%this = %resolveThis
                                                                 (#strict,
                                                                  %this))
                                                  let (%context = let (%scheduler329 = %args
                                                                    ["0" , null])
                                                                  let (%v1330 = %args
                                                                    ["1" , null])
                                                                  let (%count331 = %args
                                                                    ["2" , null])
                                                                  {[#proto: %parent,
                                                                    #class: "Object",
                                                                    #extensible: true,]
                                                                   'arguments' : {#value (%args) ,
                                                                    #writable true ,
                                                                    #configurable false},
                                                                   'count' : {#getter func
                                                                    (this , args)
                                                                    {label %ret :
                                                                    {break %ret %count331}} ,
                                                                    #setter func
                                                                    (this , args)
                                                                    {label %ret :
                                                                    {break %ret %count331 := args
                                                                    ["0" , {[#proto: %ArrayProto,
                                                                    #class: "Array",
                                                                    #extensible: true,]}]}}},
                                                                   'v1' : {#getter func
                                                                    (this , args)
                                                                    {label %ret :
                                                                    {break %ret %v1330}} ,
                                                                    #setter func
                                                                    (this , args)
                                                                    {label %ret :
                                                                    {break %ret %v1330 := args
                                                                    ["0" , {[#proto: %ArrayProto,
                                                                    #class: "Array",
                                                                    #extensible: true,]}]}}},
                                                                   'scheduler' : {#getter func
                                                                    (this , args)
                                                                    {label %ret :
                                                                    {break %ret %scheduler329}} ,
                                                                    #setter func
                                                                    (this , args)
                                                                    {label %ret :
                                                                    {break %ret %scheduler329 := args
                                                                    ["0" , {[#proto: %ArrayProto,
                                                                    #class: "Array",
                                                                    #extensible: true,]}]}}}})
                                                  {try
                                                   {%set-property(%ToObject
                                                                    (%this),
                                                                  "scheduler",
                                                                  %context
                                                                    ["scheduler" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}])}
                                                   catch
                                                   {%ErrorDispatch};
                                                   try
                                                   {%set-property(%ToObject
                                                                    (%this),
                                                                  "v1",
                                                                  %context
                                                                    ["v1" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}])}
                                                   catch
                                                   {%ErrorDispatch};
                                                   try
                                                   {%set-property(%ToObject
                                                                    (%this),
                                                                  "count",
                                                                  %context
                                                                    ["count" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}])}
                                                   catch
                                                   {%ErrorDispatch};
                                                   undefined}}},
                                         #class: "Function",
                                         #extensible: true,]
                                        'prototype' : {#value (%prototype332) ,
                                                       #writable true ,
                                                       #configurable true},
                                        'length' : {#value (3.) ,
                                                    #writable true ,
                                                    #configurable true},
                                        'caller' : {#getter %ThrowTypeError ,
                                                    #setter %ThrowTypeError},
                                        'arguments' : {#getter %ThrowTypeError ,
                                                       #setter %ThrowTypeError}})
                   {%prototype332["constructor" = %thisfunc333 , null];
                    %thisfunc333})
   %context["IdleTask" = %fobj334 ,
            {[#proto: null, #class: "Object", #extensible: true,]
             '0' : {#value (%fobj334) , #writable true , #configurable true}}];
   let (%fobj328 = let (%prototype326 = {[#proto: %ObjectProto,
                                          #class: "Object",
                                          #extensible: true,]
                                         'constructor' : {#value (undefined) ,
                                                          #writable true ,
                                                          #configurable false}})
                   let (%parent = %context)
                   let (%thisfunc327 = {[#proto: %FunctionProto,
                                         #code: func(%this , %args)
                                                {%args[delete "%new"];
                                                 label %ret :
                                                 {let (%this = %resolveThis
                                                                 (#strict,
                                                                  %this))
                                                  let (%context = let (%scheduler325 = %args
                                                                    ["0" , null])
                                                                  {[#proto: %parent,
                                                                    #class: "Object",
                                                                    #extensible: true,]
                                                                   'arguments' : {#value (%args) ,
                                                                    #writable true ,
                                                                    #configurable false},
                                                                   'scheduler' : {#getter func
                                                                    (this , args)
                                                                    {label %ret :
                                                                    {break %ret %scheduler325}} ,
                                                                    #setter func
                                                                    (this , args)
                                                                    {label %ret :
                                                                    {break %ret %scheduler325 := args
                                                                    ["0" , {[#proto: %ArrayProto,
                                                                    #class: "Array",
                                                                    #extensible: true,]}]}}}})
                                                  {try
                                                   {%set-property(%ToObject
                                                                    (%this),
                                                                  "scheduler",
                                                                  %context
                                                                    ["scheduler" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}])}
                                                   catch
                                                   {%ErrorDispatch};
                                                   try
                                                   {%set-property(%ToObject
                                                                    (%this),
                                                                  "v1",
                                                                  null)}
                                                   catch
                                                   {%ErrorDispatch};
                                                   undefined}}},
                                         #class: "Function",
                                         #extensible: true,]
                                        'prototype' : {#value (%prototype326) ,
                                                       #writable true ,
                                                       #configurable true},
                                        'length' : {#value (1.) ,
                                                    #writable true ,
                                                    #configurable true},
                                        'caller' : {#getter %ThrowTypeError ,
                                                    #setter %ThrowTypeError},
                                        'arguments' : {#getter %ThrowTypeError ,
                                                       #setter %ThrowTypeError}})
                   {%prototype326["constructor" = %thisfunc327 , null];
                    %thisfunc327})
   %context["DeviceTask" = %fobj328 ,
            {[#proto: null, #class: "Object", #extensible: true,]
             '0' : {#value (%fobj328) , #writable true , #configurable true}}];
   let (%fobj324 = let (%prototype322 = {[#proto: %ObjectProto,
                                          #class: "Object",
                                          #extensible: true,]
                                         'constructor' : {#value (undefined) ,
                                                          #writable true ,
                                                          #configurable false}})
                   let (%parent = %context)
                   let (%thisfunc323 = {[#proto: %FunctionProto,
                                         #code: func(%this , %args)
                                                {%args[delete "%new"];
                                                 label %ret :
                                                 {let (%this = %resolveThis
                                                                 (#strict,
                                                                  %this))
                                                  let (%context = let (%scheduler319 = %args
                                                                    ["0" , null])
                                                                  let (%v1320 = %args
                                                                    ["1" , null])
                                                                  let (%v2321 = %args
                                                                    ["2" , null])
                                                                  {[#proto: %parent,
                                                                    #class: "Object",
                                                                    #extensible: true,]
                                                                   'arguments' : {#value (%args) ,
                                                                    #writable true ,
                                                                    #configurable false},
                                                                   'v2' : {#getter func
                                                                    (this , args)
                                                                    {label %ret :
                                                                    {break %ret %v2321}} ,
                                                                    #setter func
                                                                    (this , args)
                                                                    {label %ret :
                                                                    {break %ret %v2321 := args
                                                                    ["0" , {[#proto: %ArrayProto,
                                                                    #class: "Array",
                                                                    #extensible: true,]}]}}},
                                                                   'v1' : {#getter func
                                                                    (this , args)
                                                                    {label %ret :
                                                                    {break %ret %v1320}} ,
                                                                    #setter func
                                                                    (this , args)
                                                                    {label %ret :
                                                                    {break %ret %v1320 := args
                                                                    ["0" , {[#proto: %ArrayProto,
                                                                    #class: "Array",
                                                                    #extensible: true,]}]}}},
                                                                   'scheduler' : {#getter func
                                                                    (this , args)
                                                                    {label %ret :
                                                                    {break %ret %scheduler319}} ,
                                                                    #setter func
                                                                    (this , args)
                                                                    {label %ret :
                                                                    {break %ret %scheduler319 := args
                                                                    ["0" , {[#proto: %ArrayProto,
                                                                    #class: "Array",
                                                                    #extensible: true,]}]}}}})
                                                  {try
                                                   {%set-property(%ToObject
                                                                    (%this),
                                                                  "scheduler",
                                                                  %context
                                                                    ["scheduler" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}])}
                                                   catch
                                                   {%ErrorDispatch};
                                                   try
                                                   {%set-property(%ToObject
                                                                    (%this),
                                                                  "v1",
                                                                  %context
                                                                    ["v1" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}])}
                                                   catch
                                                   {%ErrorDispatch};
                                                   try
                                                   {%set-property(%ToObject
                                                                    (%this),
                                                                  "v2",
                                                                  %context
                                                                    ["v2" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}])}
                                                   catch
                                                   {%ErrorDispatch};
                                                   undefined}}},
                                         #class: "Function",
                                         #extensible: true,]
                                        'prototype' : {#value (%prototype322) ,
                                                       #writable true ,
                                                       #configurable true},
                                        'length' : {#value (3.) ,
                                                    #writable true ,
                                                    #configurable true},
                                        'caller' : {#getter %ThrowTypeError ,
                                                    #setter %ThrowTypeError},
                                        'arguments' : {#getter %ThrowTypeError ,
                                                       #setter %ThrowTypeError}})
                   {%prototype322["constructor" = %thisfunc323 , null];
                    %thisfunc323})
   %context["WorkerTask" = %fobj324 ,
            {[#proto: null, #class: "Object", #extensible: true,]
             '0' : {#value (%fobj324) , #writable true , #configurable true}}];
   let (%fobj318 = let (%prototype316 = {[#proto: %ObjectProto,
                                          #class: "Object",
                                          #extensible: true,]
                                         'constructor' : {#value (undefined) ,
                                                          #writable true ,
                                                          #configurable false}})
                   let (%parent = %context)
                   let (%thisfunc317 = {[#proto: %FunctionProto,
                                         #code: func(%this , %args)
                                                {%args[delete "%new"];
                                                 label %ret :
                                                 {let (%this = %resolveThis
                                                                 (#strict,
                                                                  %this))
                                                  let (%context = let (%scheduler315 = %args
                                                                    ["0" , null])
                                                                  {[#proto: %parent,
                                                                    #class: "Object",
                                                                    #extensible: true,]
                                                                   'arguments' : {#value (%args) ,
                                                                    #writable true ,
                                                                    #configurable false},
                                                                   'scheduler' : {#getter func
                                                                    (this , args)
                                                                    {label %ret :
                                                                    {break %ret %scheduler315}} ,
                                                                    #setter func
                                                                    (this , args)
                                                                    {label %ret :
                                                                    {break %ret %scheduler315 := args
                                                                    ["0" , {[#proto: %ArrayProto,
                                                                    #class: "Array",
                                                                    #extensible: true,]}]}}}})
                                                  {try
                                                   {%set-property(%ToObject
                                                                    (%this),
                                                                  "scheduler",
                                                                  %context
                                                                    ["scheduler" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}])}
                                                   catch
                                                   {%ErrorDispatch};
                                                   try
                                                   {%set-property(%ToObject
                                                                    (%this),
                                                                  "v1",
                                                                  null)}
                                                   catch
                                                   {%ErrorDispatch};
                                                   try
                                                   {%set-property(%ToObject
                                                                    (%this),
                                                                  "v2",
                                                                  null)}
                                                   catch
                                                   {%ErrorDispatch};
                                                   undefined}}},
                                         #class: "Function",
                                         #extensible: true,]
                                        'prototype' : {#value (%prototype316) ,
                                                       #writable true ,
                                                       #configurable true},
                                        'length' : {#value (1.) ,
                                                    #writable true ,
                                                    #configurable true},
                                        'caller' : {#getter %ThrowTypeError ,
                                                    #setter %ThrowTypeError},
                                        'arguments' : {#getter %ThrowTypeError ,
                                                       #setter %ThrowTypeError}})
                   {%prototype316["constructor" = %thisfunc317 , null];
                    %thisfunc317})
   %context["HandlerTask" = %fobj318 ,
            {[#proto: null, #class: "Object", #extensible: true,]
             '0' : {#value (%fobj318) , #writable true , #configurable true}}];
   let (%fobj314 = let (%prototype312 = {[#proto: %ObjectProto,
                                          #class: "Object",
                                          #extensible: true,]
                                         'constructor' : {#value (undefined) ,
                                                          #writable true ,
                                                          #configurable false}})
                   let (%parent = %context)
                   let (%thisfunc313 = {[#proto: %FunctionProto,
                                         #code: func(%this , %args)
                                                {%args[delete "%new"];
                                                 label %ret :
                                                 {let (%this = %resolveThis
                                                                 (#strict,
                                                                  %this))
                                                  let (%context = let (%link305 = %args
                                                                    ["0" , null])
                                                                  let (%id306 = %args
                                                                    ["1" , null])
                                                                  let (%kind307 = %args
                                                                    ["2" , null])
                                                                  {[#proto: %parent,
                                                                    #class: "Object",
                                                                    #extensible: true,]
                                                                   'arguments' : {#value (%args) ,
                                                                    #writable true ,
                                                                    #configurable false},
                                                                   'kind' : {#getter func
                                                                    (this , args)
                                                                    {label %ret :
                                                                    {break %ret %kind307}} ,
                                                                    #setter func
                                                                    (this , args)
                                                                    {label %ret :
                                                                    {break %ret %kind307 := args
                                                                    ["0" , {[#proto: %ArrayProto,
                                                                    #class: "Array",
                                                                    #extensible: true,]}]}}},
                                                                   'id' : {#getter func
                                                                    (this , args)
                                                                    {label %ret :
                                                                    {break %ret %id306}} ,
                                                                    #setter func
                                                                    (this , args)
                                                                    {label %ret :
                                                                    {break %ret %id306 := args
                                                                    ["0" , {[#proto: %ArrayProto,
                                                                    #class: "Array",
                                                                    #extensible: true,]}]}}},
                                                                   'link' : {#getter func
                                                                    (this , args)
                                                                    {label %ret :
                                                                    {break %ret %link305}} ,
                                                                    #setter func
                                                                    (this , args)
                                                                    {label %ret :
                                                                    {break %ret %link305 := args
                                                                    ["0" , {[#proto: %ArrayProto,
                                                                    #class: "Array",
                                                                    #extensible: true,]}]}}}})
                                                  {try
                                                   {%set-property(%ToObject
                                                                    (%this),
                                                                  "link",
                                                                  %context
                                                                    ["link" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}])}
                                                   catch
                                                   {%ErrorDispatch};
                                                   try
                                                   {%set-property(%ToObject
                                                                    (%this),
                                                                  "id",
                                                                  %context
                                                                    ["id" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}])}
                                                   catch
                                                   {%ErrorDispatch};
                                                   try
                                                   {%set-property(%ToObject
                                                                    (%this),
                                                                  "kind",
                                                                  %context
                                                                    ["kind" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}])}
                                                   catch
                                                   {%ErrorDispatch};
                                                   try
                                                   {%set-property(%ToObject
                                                                    (%this),
                                                                  "a1",
                                                                  0.)}
                                                   catch
                                                   {%ErrorDispatch};
                                                   try
                                                   {%set-property(%ToObject
                                                                    (%this),
                                                                  "a2",
                                                                  let (%constr308 = %context
                                                                    ["Array" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}])
                                                                  if (prim
                                                                    ("!", prim
                                                                    ("stx=", prim
                                                                    ("typeof", %constr308) , "function")))
                                                                    {%TypeError
                                                                    ("Constructor was not a function")}
                                                                    else
                                                                    {let (%cproto309 = %constr308
                                                                    ["prototype" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}])
                                                                    let (%cproto309 = if (%IsObject
                                                                    (%cproto309))
                                                                    {%cproto309}
                                                                    else
                                                                    {%ObjectProto})
                                                                    {if (prim
                                                                    ("!", %IsObject
                                                                    (%cproto309)))
                                                                    {%cproto309 := %ObjectProto}
                                                                    else
                                                                    {undefined};
                                                                    let (%newobj310 = {[#proto: %cproto309,
                                                                    #class: "Object",
                                                                    #extensible: true,]})
                                                                    if (prim
                                                                    ("stx=", %constr308
                                                                    [<#code>] , null))
                                                                    {%TypeError
                                                                    ("Constructor was not applicable")}
                                                                    else
                                                                    {let (%constr_ret311 = %constr308
                                                                    (%newobj310,
                                                                    %mkNewArgsObj
                                                                    ({[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]
                                                                    '0' : {#value (%context
                                                                    ["DATA_SIZE" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}]) ,
                                                                    #writable true ,
                                                                    #configurable true}})))
                                                                    if (%IsObject
                                                                    (%constr_ret311))
                                                                    {%constr_ret311}
                                                                    else
                                                                    {%newobj310}}}})}
                                                   catch
                                                   {%ErrorDispatch};
                                                   undefined}}},
                                         #class: "Function",
                                         #extensible: true,]
                                        'prototype' : {#value (%prototype312) ,
                                                       #writable true ,
                                                       #configurable true},
                                        'length' : {#value (3.) ,
                                                    #writable true ,
                                                    #configurable true},
                                        'caller' : {#getter %ThrowTypeError ,
                                                    #setter %ThrowTypeError},
                                        'arguments' : {#getter %ThrowTypeError ,
                                                       #setter %ThrowTypeError}})
                   {%prototype312["constructor" = %thisfunc313 , null];
                    %thisfunc313})
   %context["Packet" = %fobj314 ,
            {[#proto: null, #class: "Object", #extensible: true,]
             '0' : {#value (%fobj314) , #writable true , #configurable true}}];
   %EnvCheckAssign(%context,
                   "COUNT",
                   1000.,
                   #strict);
   %EnvCheckAssign(%context,
                   "EXPECTED_QUEUE_COUNT",
                   2322.,
                   #strict);
   %EnvCheckAssign(%context,
                   "EXPECTED_HOLD_COUNT",
                   928.,
                   #strict);
   %EnvCheckAssign(%context,
                   "ID_IDLE",
                   0.,
                   #strict);
   %EnvCheckAssign(%context,
                   "ID_WORKER",
                   1.,
                   #strict);
   %EnvCheckAssign(%context,
                   "ID_HANDLER_A",
                   2.,
                   #strict);
   %EnvCheckAssign(%context,
                   "ID_HANDLER_B",
                   3.,
                   #strict);
   %EnvCheckAssign(%context,
                   "ID_DEVICE_A",
                   4.,
                   #strict);
   %EnvCheckAssign(%context,
                   "ID_DEVICE_B",
                   5.,
                   #strict);
   %EnvCheckAssign(%context,
                   "NUMBER_OF_IDS",
                   6.,
                   #strict);
   %EnvCheckAssign(%context,
                   "KIND_DEVICE",
                   0.,
                   #strict);
   %EnvCheckAssign(%context,
                   "KIND_WORK",
                   1.,
                   #strict);
   try
   {%set-property(%ToObject(%PropAccessorCheck(%context["Scheduler" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}])
                              ["prototype" , {[#proto: null,
                                               #class: "Object",
                                               #extensible: true,]}]),
                  "addIdleTask",
                  let (%prototype303 = {[#proto: %ObjectProto,
                                         #class: "Object",
                                         #extensible: true,]
                                        'constructor' : {#value (undefined) ,
                                                         #writable true ,
                                                         #configurable false}})
                  let (%parent = %context)
                  let (%thisfunc304 = {[#proto: %FunctionProto,
                                        #code: func(%this , %args)
                                               {%args[delete "%new"];
                                                label %ret :
                                                {let (%this = %resolveThis
                                                                (#strict,
                                                                 %this))
                                                 let (%context = let (%id292 = %args
                                                                    ["0" , null])
                                                                 let (%priority293 = %args
                                                                    ["1" , null])
                                                                 let (%queue294 = %args
                                                                    ["2" , null])
                                                                 let (%count295 = %args
                                                                    ["3" , null])
                                                                 {[#proto: %parent,
                                                                   #class: "Object",
                                                                   #extensible: true,]
                                                                  'arguments' : {#value (%args) ,
                                                                    #writable true ,
                                                                    #configurable false},
                                                                  'count' : {#getter func
                                                                    (this , args)
                                                                    {label %ret :
                                                                    {break %ret %count295}} ,
                                                                    #setter func
                                                                    (this , args)
                                                                    {label %ret :
                                                                    {break %ret %count295 := args
                                                                    ["0" , {[#proto: %ArrayProto,
                                                                    #class: "Array",
                                                                    #extensible: true,]}]}}},
                                                                  'queue' : {#getter func
                                                                    (this , args)
                                                                    {label %ret :
                                                                    {break %ret %queue294}} ,
                                                                    #setter func
                                                                    (this , args)
                                                                    {label %ret :
                                                                    {break %ret %queue294 := args
                                                                    ["0" , {[#proto: %ArrayProto,
                                                                    #class: "Array",
                                                                    #extensible: true,]}]}}},
                                                                  'priority' : {#getter func
                                                                    (this , args)
                                                                    {label %ret :
                                                                    {break %ret %priority293}} ,
                                                                    #setter func
                                                                    (this , args)
                                                                    {label %ret :
                                                                    {break %ret %priority293 := args
                                                                    ["0" , {[#proto: %ArrayProto,
                                                                    #class: "Array",
                                                                    #extensible: true,]}]}}},
                                                                  'id' : {#getter func
                                                                    (this , args)
                                                                    {label %ret :
                                                                    {break %ret %id292}} ,
                                                                    #setter func
                                                                    (this , args)
                                                                    {label %ret :
                                                                    {break %ret %id292 := args
                                                                    ["0" , {[#proto: %ArrayProto,
                                                                    #class: "Array",
                                                                    #extensible: true,]}]}}}})
                                                 {let (%obj300 = %this)
                                                  let (%fun301 = %ToObject
                                                                   (%obj300)
                                                                   ["addRunningTask" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}])
                                                  let (%ftype302 = prim
                                                                    ("typeof", %fun301))
                                                  if (prim("!", prim("stx=", %ftype302 , "function")))
                                                     {%TypeError("Not a function")}
                                                     else
                                                     {%fun301(%ToObject
                                                                (%obj300),
                                                              %mkArgsObj
                                                                ({[#proto: null,
                                                                   #class: "Object",
                                                                   #extensible: true,]
                                                                  '0' : {#value (%context
                                                                    ["id" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}]) ,
                                                                    #writable true ,
                                                                    #configurable true},
                                                                  '1' : {#value (%context
                                                                    ["priority" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}]) ,
                                                                    #writable true ,
                                                                    #configurable true},
                                                                  '2' : {#value (%context
                                                                    ["queue" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}]) ,
                                                                    #writable true ,
                                                                    #configurable true},
                                                                  '3' : {#value (let (%constr296 = %context
                                                                    ["IdleTask" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}])
                                                                    if (prim
                                                                    ("!", prim
                                                                    ("stx=", prim
                                                                    ("typeof", %constr296) , "function")))
                                                                    {%TypeError
                                                                    ("Constructor was not a function")}
                                                                    else
                                                                    {let (%cproto297 = %constr296
                                                                    ["prototype" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}])
                                                                    let (%cproto297 = if (%IsObject
                                                                    (%cproto297))
                                                                    {%cproto297}
                                                                    else
                                                                    {%ObjectProto})
                                                                    {if (prim
                                                                    ("!", %IsObject
                                                                    (%cproto297)))
                                                                    {%cproto297 := %ObjectProto}
                                                                    else
                                                                    {undefined};
                                                                    let (%newobj298 = {[#proto: %cproto297,
                                                                    #class: "Object",
                                                                    #extensible: true,]})
                                                                    if (prim
                                                                    ("stx=", %constr296
                                                                    [<#code>] , null))
                                                                    {%TypeError
                                                                    ("Constructor was not applicable")}
                                                                    else
                                                                    {let (%constr_ret299 = %constr296
                                                                    (%newobj298,
                                                                    %mkNewArgsObj
                                                                    ({[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]
                                                                    '0' : {#value (%this) ,
                                                                    #writable true ,
                                                                    #configurable true},
                                                                    '1' : {#value (1.) ,
                                                                    #writable true ,
                                                                    #configurable true},
                                                                    '2' : {#value (%context
                                                                    ["count" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}]) ,
                                                                    #writable true ,
                                                                    #configurable true}})))
                                                                    if (%IsObject
                                                                    (%constr_ret299))
                                                                    {%constr_ret299}
                                                                    else
                                                                    {%newobj298}}}}) ,
                                                                    #writable true ,
                                                                    #configurable true}}))};
                                                  undefined}}},
                                        #class: "Function",
                                        #extensible: true,]
                                       'prototype' : {#value (%prototype303) ,
                                                      #writable true ,
                                                      #configurable true},
                                       'length' : {#value (4.) ,
                                                   #writable true ,
                                                   #configurable true},
                                       'caller' : {#getter %ThrowTypeError ,
                                                   #setter %ThrowTypeError},
                                       'arguments' : {#getter %ThrowTypeError ,
                                                      #setter %ThrowTypeError}})
                  {%prototype303["constructor" = %thisfunc304 , null];
                   %thisfunc304})}
   catch
   {%ErrorDispatch};
   try
   {%set-property(%ToObject(%PropAccessorCheck(%context["Scheduler" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}])
                              ["prototype" , {[#proto: null,
                                               #class: "Object",
                                               #extensible: true,]}]),
                  "addWorkerTask",
                  let (%prototype290 = {[#proto: %ObjectProto,
                                         #class: "Object",
                                         #extensible: true,]
                                        'constructor' : {#value (undefined) ,
                                                         #writable true ,
                                                         #configurable false}})
                  let (%parent = %context)
                  let (%thisfunc291 = {[#proto: %FunctionProto,
                                        #code: func(%this , %args)
                                               {%args[delete "%new"];
                                                label %ret :
                                                {let (%this = %resolveThis
                                                                (#strict,
                                                                 %this))
                                                 let (%context = let (%id280 = %args
                                                                    ["0" , null])
                                                                 let (%priority281 = %args
                                                                    ["1" , null])
                                                                 let (%queue282 = %args
                                                                    ["2" , null])
                                                                 {[#proto: %parent,
                                                                   #class: "Object",
                                                                   #extensible: true,]
                                                                  'arguments' : {#value (%args) ,
                                                                    #writable true ,
                                                                    #configurable false},
                                                                  'queue' : {#getter func
                                                                    (this , args)
                                                                    {label %ret :
                                                                    {break %ret %queue282}} ,
                                                                    #setter func
                                                                    (this , args)
                                                                    {label %ret :
                                                                    {break %ret %queue282 := args
                                                                    ["0" , {[#proto: %ArrayProto,
                                                                    #class: "Array",
                                                                    #extensible: true,]}]}}},
                                                                  'priority' : {#getter func
                                                                    (this , args)
                                                                    {label %ret :
                                                                    {break %ret %priority281}} ,
                                                                    #setter func
                                                                    (this , args)
                                                                    {label %ret :
                                                                    {break %ret %priority281 := args
                                                                    ["0" , {[#proto: %ArrayProto,
                                                                    #class: "Array",
                                                                    #extensible: true,]}]}}},
                                                                  'id' : {#getter func
                                                                    (this , args)
                                                                    {label %ret :
                                                                    {break %ret %id280}} ,
                                                                    #setter func
                                                                    (this , args)
                                                                    {label %ret :
                                                                    {break %ret %id280 := args
                                                                    ["0" , {[#proto: %ArrayProto,
                                                                    #class: "Array",
                                                                    #extensible: true,]}]}}}})
                                                 {let (%obj287 = %this)
                                                  let (%fun288 = %ToObject
                                                                   (%obj287)
                                                                   ["addTask" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}])
                                                  let (%ftype289 = prim
                                                                    ("typeof", %fun288))
                                                  if (prim("!", prim("stx=", %ftype289 , "function")))
                                                     {%TypeError("Not a function")}
                                                     else
                                                     {%fun288(%ToObject
                                                                (%obj287),
                                                              %mkArgsObj
                                                                ({[#proto: null,
                                                                   #class: "Object",
                                                                   #extensible: true,]
                                                                  '0' : {#value (%context
                                                                    ["id" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}]) ,
                                                                    #writable true ,
                                                                    #configurable true},
                                                                  '1' : {#value (%context
                                                                    ["priority" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}]) ,
                                                                    #writable true ,
                                                                    #configurable true},
                                                                  '2' : {#value (%context
                                                                    ["queue" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}]) ,
                                                                    #writable true ,
                                                                    #configurable true},
                                                                  '3' : {#value (let (%constr283 = %context
                                                                    ["WorkerTask" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}])
                                                                    if (prim
                                                                    ("!", prim
                                                                    ("stx=", prim
                                                                    ("typeof", %constr283) , "function")))
                                                                    {%TypeError
                                                                    ("Constructor was not a function")}
                                                                    else
                                                                    {let (%cproto284 = %constr283
                                                                    ["prototype" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}])
                                                                    let (%cproto284 = if (%IsObject
                                                                    (%cproto284))
                                                                    {%cproto284}
                                                                    else
                                                                    {%ObjectProto})
                                                                    {if (prim
                                                                    ("!", %IsObject
                                                                    (%cproto284)))
                                                                    {%cproto284 := %ObjectProto}
                                                                    else
                                                                    {undefined};
                                                                    let (%newobj285 = {[#proto: %cproto284,
                                                                    #class: "Object",
                                                                    #extensible: true,]})
                                                                    if (prim
                                                                    ("stx=", %constr283
                                                                    [<#code>] , null))
                                                                    {%TypeError
                                                                    ("Constructor was not applicable")}
                                                                    else
                                                                    {let (%constr_ret286 = %constr283
                                                                    (%newobj285,
                                                                    %mkNewArgsObj
                                                                    ({[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]
                                                                    '0' : {#value (%this) ,
                                                                    #writable true ,
                                                                    #configurable true},
                                                                    '1' : {#value (%context
                                                                    ["ID_HANDLER_A" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}]) ,
                                                                    #writable true ,
                                                                    #configurable true},
                                                                    '2' : {#value (0.) ,
                                                                    #writable true ,
                                                                    #configurable true}})))
                                                                    if (%IsObject
                                                                    (%constr_ret286))
                                                                    {%constr_ret286}
                                                                    else
                                                                    {%newobj285}}}}) ,
                                                                    #writable true ,
                                                                    #configurable true}}))};
                                                  undefined}}},
                                        #class: "Function",
                                        #extensible: true,]
                                       'prototype' : {#value (%prototype290) ,
                                                      #writable true ,
                                                      #configurable true},
                                       'length' : {#value (3.) ,
                                                   #writable true ,
                                                   #configurable true},
                                       'caller' : {#getter %ThrowTypeError ,
                                                   #setter %ThrowTypeError},
                                       'arguments' : {#getter %ThrowTypeError ,
                                                      #setter %ThrowTypeError}})
                  {%prototype290["constructor" = %thisfunc291 , null];
                   %thisfunc291})}
   catch
   {%ErrorDispatch};
   try
   {%set-property(%ToObject(%PropAccessorCheck(%context["Scheduler" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}])
                              ["prototype" , {[#proto: null,
                                               #class: "Object",
                                               #extensible: true,]}]),
                  "addHandlerTask",
                  let (%prototype278 = {[#proto: %ObjectProto,
                                         #class: "Object",
                                         #extensible: true,]
                                        'constructor' : {#value (undefined) ,
                                                         #writable true ,
                                                         #configurable false}})
                  let (%parent = %context)
                  let (%thisfunc279 = {[#proto: %FunctionProto,
                                        #code: func(%this , %args)
                                               {%args[delete "%new"];
                                                label %ret :
                                                {let (%this = %resolveThis
                                                                (#strict,
                                                                 %this))
                                                 let (%context = let (%id268 = %args
                                                                    ["0" , null])
                                                                 let (%priority269 = %args
                                                                    ["1" , null])
                                                                 let (%queue270 = %args
                                                                    ["2" , null])
                                                                 {[#proto: %parent,
                                                                   #class: "Object",
                                                                   #extensible: true,]
                                                                  'arguments' : {#value (%args) ,
                                                                    #writable true ,
                                                                    #configurable false},
                                                                  'queue' : {#getter func
                                                                    (this , args)
                                                                    {label %ret :
                                                                    {break %ret %queue270}} ,
                                                                    #setter func
                                                                    (this , args)
                                                                    {label %ret :
                                                                    {break %ret %queue270 := args
                                                                    ["0" , {[#proto: %ArrayProto,
                                                                    #class: "Array",
                                                                    #extensible: true,]}]}}},
                                                                  'priority' : {#getter func
                                                                    (this , args)
                                                                    {label %ret :
                                                                    {break %ret %priority269}} ,
                                                                    #setter func
                                                                    (this , args)
                                                                    {label %ret :
                                                                    {break %ret %priority269 := args
                                                                    ["0" , {[#proto: %ArrayProto,
                                                                    #class: "Array",
                                                                    #extensible: true,]}]}}},
                                                                  'id' : {#getter func
                                                                    (this , args)
                                                                    {label %ret :
                                                                    {break %ret %id268}} ,
                                                                    #setter func
                                                                    (this , args)
                                                                    {label %ret :
                                                                    {break %ret %id268 := args
                                                                    ["0" , {[#proto: %ArrayProto,
                                                                    #class: "Array",
                                                                    #extensible: true,]}]}}}})
                                                 {let (%obj275 = %this)
                                                  let (%fun276 = %ToObject
                                                                   (%obj275)
                                                                   ["addTask" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}])
                                                  let (%ftype277 = prim
                                                                    ("typeof", %fun276))
                                                  if (prim("!", prim("stx=", %ftype277 , "function")))
                                                     {%TypeError("Not a function")}
                                                     else
                                                     {%fun276(%ToObject
                                                                (%obj275),
                                                              %mkArgsObj
                                                                ({[#proto: null,
                                                                   #class: "Object",
                                                                   #extensible: true,]
                                                                  '0' : {#value (%context
                                                                    ["id" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}]) ,
                                                                    #writable true ,
                                                                    #configurable true},
                                                                  '1' : {#value (%context
                                                                    ["priority" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}]) ,
                                                                    #writable true ,
                                                                    #configurable true},
                                                                  '2' : {#value (%context
                                                                    ["queue" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}]) ,
                                                                    #writable true ,
                                                                    #configurable true},
                                                                  '3' : {#value (let (%constr271 = %context
                                                                    ["HandlerTask" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}])
                                                                    if (prim
                                                                    ("!", prim
                                                                    ("stx=", prim
                                                                    ("typeof", %constr271) , "function")))
                                                                    {%TypeError
                                                                    ("Constructor was not a function")}
                                                                    else
                                                                    {let (%cproto272 = %constr271
                                                                    ["prototype" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}])
                                                                    let (%cproto272 = if (%IsObject
                                                                    (%cproto272))
                                                                    {%cproto272}
                                                                    else
                                                                    {%ObjectProto})
                                                                    {if (prim
                                                                    ("!", %IsObject
                                                                    (%cproto272)))
                                                                    {%cproto272 := %ObjectProto}
                                                                    else
                                                                    {undefined};
                                                                    let (%newobj273 = {[#proto: %cproto272,
                                                                    #class: "Object",
                                                                    #extensible: true,]})
                                                                    if (prim
                                                                    ("stx=", %constr271
                                                                    [<#code>] , null))
                                                                    {%TypeError
                                                                    ("Constructor was not applicable")}
                                                                    else
                                                                    {let (%constr_ret274 = %constr271
                                                                    (%newobj273,
                                                                    %mkNewArgsObj
                                                                    ({[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]
                                                                    '0' : {#value (%this) ,
                                                                    #writable true ,
                                                                    #configurable true}})))
                                                                    if (%IsObject
                                                                    (%constr_ret274))
                                                                    {%constr_ret274}
                                                                    else
                                                                    {%newobj273}}}}) ,
                                                                    #writable true ,
                                                                    #configurable true}}))};
                                                  undefined}}},
                                        #class: "Function",
                                        #extensible: true,]
                                       'prototype' : {#value (%prototype278) ,
                                                      #writable true ,
                                                      #configurable true},
                                       'length' : {#value (3.) ,
                                                   #writable true ,
                                                   #configurable true},
                                       'caller' : {#getter %ThrowTypeError ,
                                                   #setter %ThrowTypeError},
                                       'arguments' : {#getter %ThrowTypeError ,
                                                      #setter %ThrowTypeError}})
                  {%prototype278["constructor" = %thisfunc279 , null];
                   %thisfunc279})}
   catch
   {%ErrorDispatch};
   try
   {%set-property(%ToObject(%PropAccessorCheck(%context["Scheduler" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}])
                              ["prototype" , {[#proto: null,
                                               #class: "Object",
                                               #extensible: true,]}]),
                  "addDeviceTask",
                  let (%prototype266 = {[#proto: %ObjectProto,
                                         #class: "Object",
                                         #extensible: true,]
                                        'constructor' : {#value (undefined) ,
                                                         #writable true ,
                                                         #configurable false}})
                  let (%parent = %context)
                  let (%thisfunc267 = {[#proto: %FunctionProto,
                                        #code: func(%this , %args)
                                               {%args[delete "%new"];
                                                label %ret :
                                                {let (%this = %resolveThis
                                                                (#strict,
                                                                 %this))
                                                 let (%context = let (%id256 = %args
                                                                    ["0" , null])
                                                                 let (%priority257 = %args
                                                                    ["1" , null])
                                                                 let (%queue258 = %args
                                                                    ["2" , null])
                                                                 {[#proto: %parent,
                                                                   #class: "Object",
                                                                   #extensible: true,]
                                                                  'arguments' : {#value (%args) ,
                                                                    #writable true ,
                                                                    #configurable false},
                                                                  'queue' : {#getter func
                                                                    (this , args)
                                                                    {label %ret :
                                                                    {break %ret %queue258}} ,
                                                                    #setter func
                                                                    (this , args)
                                                                    {label %ret :
                                                                    {break %ret %queue258 := args
                                                                    ["0" , {[#proto: %ArrayProto,
                                                                    #class: "Array",
                                                                    #extensible: true,]}]}}},
                                                                  'priority' : {#getter func
                                                                    (this , args)
                                                                    {label %ret :
                                                                    {break %ret %priority257}} ,
                                                                    #setter func
                                                                    (this , args)
                                                                    {label %ret :
                                                                    {break %ret %priority257 := args
                                                                    ["0" , {[#proto: %ArrayProto,
                                                                    #class: "Array",
                                                                    #extensible: true,]}]}}},
                                                                  'id' : {#getter func
                                                                    (this , args)
                                                                    {label %ret :
                                                                    {break %ret %id256}} ,
                                                                    #setter func
                                                                    (this , args)
                                                                    {label %ret :
                                                                    {break %ret %id256 := args
                                                                    ["0" , {[#proto: %ArrayProto,
                                                                    #class: "Array",
                                                                    #extensible: true,]}]}}}})
                                                 {let (%obj263 = %this)
                                                  let (%fun264 = %ToObject
                                                                   (%obj263)
                                                                   ["addTask" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}])
                                                  let (%ftype265 = prim
                                                                    ("typeof", %fun264))
                                                  if (prim("!", prim("stx=", %ftype265 , "function")))
                                                     {%TypeError("Not a function")}
                                                     else
                                                     {%fun264(%ToObject
                                                                (%obj263),
                                                              %mkArgsObj
                                                                ({[#proto: null,
                                                                   #class: "Object",
                                                                   #extensible: true,]
                                                                  '0' : {#value (%context
                                                                    ["id" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}]) ,
                                                                    #writable true ,
                                                                    #configurable true},
                                                                  '1' : {#value (%context
                                                                    ["priority" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}]) ,
                                                                    #writable true ,
                                                                    #configurable true},
                                                                  '2' : {#value (%context
                                                                    ["queue" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}]) ,
                                                                    #writable true ,
                                                                    #configurable true},
                                                                  '3' : {#value (let (%constr259 = %context
                                                                    ["DeviceTask" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}])
                                                                    if (prim
                                                                    ("!", prim
                                                                    ("stx=", prim
                                                                    ("typeof", %constr259) , "function")))
                                                                    {%TypeError
                                                                    ("Constructor was not a function")}
                                                                    else
                                                                    {let (%cproto260 = %constr259
                                                                    ["prototype" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}])
                                                                    let (%cproto260 = if (%IsObject
                                                                    (%cproto260))
                                                                    {%cproto260}
                                                                    else
                                                                    {%ObjectProto})
                                                                    {if (prim
                                                                    ("!", %IsObject
                                                                    (%cproto260)))
                                                                    {%cproto260 := %ObjectProto}
                                                                    else
                                                                    {undefined};
                                                                    let (%newobj261 = {[#proto: %cproto260,
                                                                    #class: "Object",
                                                                    #extensible: true,]})
                                                                    if (prim
                                                                    ("stx=", %constr259
                                                                    [<#code>] , null))
                                                                    {%TypeError
                                                                    ("Constructor was not applicable")}
                                                                    else
                                                                    {let (%constr_ret262 = %constr259
                                                                    (%newobj261,
                                                                    %mkNewArgsObj
                                                                    ({[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]
                                                                    '0' : {#value (%this) ,
                                                                    #writable true ,
                                                                    #configurable true}})))
                                                                    if (%IsObject
                                                                    (%constr_ret262))
                                                                    {%constr_ret262}
                                                                    else
                                                                    {%newobj261}}}}) ,
                                                                    #writable true ,
                                                                    #configurable true}}))};
                                                  undefined}}},
                                        #class: "Function",
                                        #extensible: true,]
                                       'prototype' : {#value (%prototype266) ,
                                                      #writable true ,
                                                      #configurable true},
                                       'length' : {#value (3.) ,
                                                   #writable true ,
                                                   #configurable true},
                                       'caller' : {#getter %ThrowTypeError ,
                                                   #setter %ThrowTypeError},
                                       'arguments' : {#getter %ThrowTypeError ,
                                                      #setter %ThrowTypeError}})
                  {%prototype266["constructor" = %thisfunc267 , null];
                   %thisfunc267})}
   catch
   {%ErrorDispatch};
   try
   {%set-property(%ToObject(%PropAccessorCheck(%context["Scheduler" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}])
                              ["prototype" , {[#proto: null,
                                               #class: "Object",
                                               #extensible: true,]}]),
                  "addRunningTask",
                  let (%prototype254 = {[#proto: %ObjectProto,
                                         #class: "Object",
                                         #extensible: true,]
                                        'constructor' : {#value (undefined) ,
                                                         #writable true ,
                                                         #configurable false}})
                  let (%parent = %context)
                  let (%thisfunc255 = {[#proto: %FunctionProto,
                                        #code: func(%this , %args)
                                               {%args[delete "%new"];
                                                label %ret :
                                                {let (%this = %resolveThis
                                                                (#strict,
                                                                 %this))
                                                 let (%context = let (%id244 = %args
                                                                    ["0" , null])
                                                                 let (%priority245 = %args
                                                                    ["1" , null])
                                                                 let (%queue246 = %args
                                                                    ["2" , null])
                                                                 let (%task247 = %args
                                                                    ["3" , null])
                                                                 {[#proto: %parent,
                                                                   #class: "Object",
                                                                   #extensible: true,]
                                                                  'arguments' : {#value (%args) ,
                                                                    #writable true ,
                                                                    #configurable false},
                                                                  'task' : {#getter func
                                                                    (this , args)
                                                                    {label %ret :
                                                                    {break %ret %task247}} ,
                                                                    #setter func
                                                                    (this , args)
                                                                    {label %ret :
                                                                    {break %ret %task247 := args
                                                                    ["0" , {[#proto: %ArrayProto,
                                                                    #class: "Array",
                                                                    #extensible: true,]}]}}},
                                                                  'queue' : {#getter func
                                                                    (this , args)
                                                                    {label %ret :
                                                                    {break %ret %queue246}} ,
                                                                    #setter func
                                                                    (this , args)
                                                                    {label %ret :
                                                                    {break %ret %queue246 := args
                                                                    ["0" , {[#proto: %ArrayProto,
                                                                    #class: "Array",
                                                                    #extensible: true,]}]}}},
                                                                  'priority' : {#getter func
                                                                    (this , args)
                                                                    {label %ret :
                                                                    {break %ret %priority245}} ,
                                                                    #setter func
                                                                    (this , args)
                                                                    {label %ret :
                                                                    {break %ret %priority245 := args
                                                                    ["0" , {[#proto: %ArrayProto,
                                                                    #class: "Array",
                                                                    #extensible: true,]}]}}},
                                                                  'id' : {#getter func
                                                                    (this , args)
                                                                    {label %ret :
                                                                    {break %ret %id244}} ,
                                                                    #setter func
                                                                    (this , args)
                                                                    {label %ret :
                                                                    {break %ret %id244 := args
                                                                    ["0" , {[#proto: %ArrayProto,
                                                                    #class: "Array",
                                                                    #extensible: true,]}]}}}})
                                                 {let (%obj251 = %this)
                                                  let (%fun252 = %ToObject
                                                                   (%obj251)
                                                                   ["addTask" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}])
                                                  let (%ftype253 = prim
                                                                    ("typeof", %fun252))
                                                  if (prim("!", prim("stx=", %ftype253 , "function")))
                                                     {%TypeError("Not a function")}
                                                     else
                                                     {%fun252(%ToObject
                                                                (%obj251),
                                                              %mkArgsObj
                                                                ({[#proto: null,
                                                                   #class: "Object",
                                                                   #extensible: true,]
                                                                  '0' : {#value (%context
                                                                    ["id" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}]) ,
                                                                    #writable true ,
                                                                    #configurable true},
                                                                  '1' : {#value (%context
                                                                    ["priority" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}]) ,
                                                                    #writable true ,
                                                                    #configurable true},
                                                                  '2' : {#value (%context
                                                                    ["queue" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}]) ,
                                                                    #writable true ,
                                                                    #configurable true},
                                                                  '3' : {#value (%context
                                                                    ["task" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}]) ,
                                                                    #writable true ,
                                                                    #configurable true}}))};
                                                  let (%obj248 = %PropAccessorCheck
                                                                   (%this)
                                                                   ["currentTcb" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}])
                                                  let (%fun249 = %ToObject
                                                                   (%obj248)
                                                                   ["setRunning" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}])
                                                  let (%ftype250 = prim
                                                                    ("typeof", %fun249))
                                                  if (prim("!", prim("stx=", %ftype250 , "function")))
                                                     {%TypeError("Not a function")}
                                                     else
                                                     {%fun249(%ToObject
                                                                (%obj248),
                                                              %mkArgsObj
                                                                ({[#proto: null,
                                                                   #class: "Object",
                                                                   #extensible: true,]}))};
                                                  undefined}}},
                                        #class: "Function",
                                        #extensible: true,]
                                       'prototype' : {#value (%prototype254) ,
                                                      #writable true ,
                                                      #configurable true},
                                       'length' : {#value (4.) ,
                                                   #writable true ,
                                                   #configurable true},
                                       'caller' : {#getter %ThrowTypeError ,
                                                   #setter %ThrowTypeError},
                                       'arguments' : {#getter %ThrowTypeError ,
                                                      #setter %ThrowTypeError}})
                  {%prototype254["constructor" = %thisfunc255 , null];
                   %thisfunc255})}
   catch
   {%ErrorDispatch};
   try
   {%set-property(%ToObject(%PropAccessorCheck(%context["Scheduler" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}])
                              ["prototype" , {[#proto: null,
                                               #class: "Object",
                                               #extensible: true,]}]),
                  "addTask",
                  let (%prototype242 = {[#proto: %ObjectProto,
                                         #class: "Object",
                                         #extensible: true,]
                                        'constructor' : {#value (undefined) ,
                                                         #writable true ,
                                                         #configurable false}})
                  let (%parent = %context)
                  let (%thisfunc243 = {[#proto: %FunctionProto,
                                        #code: func(%this , %args)
                                               {%args[delete "%new"];
                                                label %ret :
                                                {let (%this = %resolveThis
                                                                (#strict,
                                                                 %this))
                                                 let (%context = let (%id234 = %args
                                                                    ["0" , null])
                                                                 let (%priority235 = %args
                                                                    ["1" , null])
                                                                 let (%queue236 = %args
                                                                    ["2" , null])
                                                                 let (%task237 = %args
                                                                    ["3" , null])
                                                                 {[#proto: %parent,
                                                                   #class: "Object",
                                                                   #extensible: true,]
                                                                  'arguments' : {#value (%args) ,
                                                                    #writable true ,
                                                                    #configurable false},
                                                                  'task' : {#getter func
                                                                    (this , args)
                                                                    {label %ret :
                                                                    {break %ret %task237}} ,
                                                                    #setter func
                                                                    (this , args)
                                                                    {label %ret :
                                                                    {break %ret %task237 := args
                                                                    ["0" , {[#proto: %ArrayProto,
                                                                    #class: "Array",
                                                                    #extensible: true,]}]}}},
                                                                  'queue' : {#getter func
                                                                    (this , args)
                                                                    {label %ret :
                                                                    {break %ret %queue236}} ,
                                                                    #setter func
                                                                    (this , args)
                                                                    {label %ret :
                                                                    {break %ret %queue236 := args
                                                                    ["0" , {[#proto: %ArrayProto,
                                                                    #class: "Array",
                                                                    #extensible: true,]}]}}},
                                                                  'priority' : {#getter func
                                                                    (this , args)
                                                                    {label %ret :
                                                                    {break %ret %priority235}} ,
                                                                    #setter func
                                                                    (this , args)
                                                                    {label %ret :
                                                                    {break %ret %priority235 := args
                                                                    ["0" , {[#proto: %ArrayProto,
                                                                    #class: "Array",
                                                                    #extensible: true,]}]}}},
                                                                  'id' : {#getter func
                                                                    (this , args)
                                                                    {label %ret :
                                                                    {break %ret %id234}} ,
                                                                    #setter func
                                                                    (this , args)
                                                                    {label %ret :
                                                                    {break %ret %id234 := args
                                                                    ["0" , {[#proto: %ArrayProto,
                                                                    #class: "Array",
                                                                    #extensible: true,]}]}}}})
                                                 {try
                                                  {%set-property(%ToObject
                                                                   (%this),
                                                                 "currentTcb",
                                                                 let (%constr238 = %context
                                                                    ["TaskControlBlock" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}])
                                                                 if (prim
                                                                    ("!", prim
                                                                    ("stx=", prim
                                                                    ("typeof", %constr238) , "function")))
                                                                    {%TypeError
                                                                    ("Constructor was not a function")}
                                                                    else
                                                                    {let (%cproto239 = %constr238
                                                                    ["prototype" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}])
                                                                    let (%cproto239 = if (%IsObject
                                                                    (%cproto239))
                                                                    {%cproto239}
                                                                    else
                                                                    {%ObjectProto})
                                                                    {if (prim
                                                                    ("!", %IsObject
                                                                    (%cproto239)))
                                                                    {%cproto239 := %ObjectProto}
                                                                    else
                                                                    {undefined};
                                                                    let (%newobj240 = {[#proto: %cproto239,
                                                                    #class: "Object",
                                                                    #extensible: true,]})
                                                                    if (prim
                                                                    ("stx=", %constr238
                                                                    [<#code>] , null))
                                                                    {%TypeError
                                                                    ("Constructor was not applicable")}
                                                                    else
                                                                    {let (%constr_ret241 = %constr238
                                                                    (%newobj240,
                                                                    %mkNewArgsObj
                                                                    ({[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]
                                                                    '0' : {#value (%PropAccessorCheck
                                                                    (%this)["list" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}]) ,
                                                                    #writable true ,
                                                                    #configurable true},
                                                                    '1' : {#value (%context
                                                                    ["id" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}]) ,
                                                                    #writable true ,
                                                                    #configurable true},
                                                                    '2' : {#value (%context
                                                                    ["priority" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}]) ,
                                                                    #writable true ,
                                                                    #configurable true},
                                                                    '3' : {#value (%context
                                                                    ["queue" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}]) ,
                                                                    #writable true ,
                                                                    #configurable true},
                                                                    '4' : {#value (%context
                                                                    ["task" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}]) ,
                                                                    #writable true ,
                                                                    #configurable true}})))
                                                                    if (%IsObject
                                                                    (%constr_ret241))
                                                                    {%constr_ret241}
                                                                    else
                                                                    {%newobj240}}}})}
                                                  catch
                                                  {%ErrorDispatch};
                                                  try
                                                  {%set-property(%ToObject
                                                                   (%this),
                                                                 "list",
                                                                 %PropAccessorCheck
                                                                   (%this)
                                                                   ["currentTcb" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}])}
                                                  catch
                                                  {%ErrorDispatch};
                                                  try
                                                  {%set-property(%ToObject
                                                                   (%PropAccessorCheck
                                                                    (%this)
                                                                    ["blocks" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}]),
                                                                 %ToString
                                                                   (%context
                                                                    ["id" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}]),
                                                                 %PropAccessorCheck
                                                                   (%this)
                                                                   ["currentTcb" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}])}
                                                  catch
                                                  {%ErrorDispatch};
                                                  undefined}}},
                                        #class: "Function",
                                        #extensible: true,]
                                       'prototype' : {#value (%prototype242) ,
                                                      #writable true ,
                                                      #configurable true},
                                       'length' : {#value (4.) ,
                                                   #writable true ,
                                                   #configurable true},
                                       'caller' : {#getter %ThrowTypeError ,
                                                   #setter %ThrowTypeError},
                                       'arguments' : {#getter %ThrowTypeError ,
                                                      #setter %ThrowTypeError}})
                  {%prototype242["constructor" = %thisfunc243 , null];
                   %thisfunc243})}
   catch
   {%ErrorDispatch};
   try
   {%set-property(%ToObject(%PropAccessorCheck(%context["Scheduler" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}])
                              ["prototype" , {[#proto: null,
                                               #class: "Object",
                                               #extensible: true,]}]),
                  "schedule",
                  let (%prototype232 = {[#proto: %ObjectProto,
                                         #class: "Object",
                                         #extensible: true,]
                                        'constructor' : {#value (undefined) ,
                                                         #writable true ,
                                                         #configurable false}})
                  let (%parent = %context)
                  let (%thisfunc233 = {[#proto: %FunctionProto,
                                        #code: func(%this , %args)
                                               {%args[delete "%new"];
                                                label %ret :
                                                {let (%this = %resolveThis
                                                                (#strict,
                                                                 %this))
                                                 let (%context = {[#proto: %parent,
                                                                   #class: "Object",
                                                                   #extensible: true,]
                                                                  'arguments' : {#value (%args) ,
                                                                    #writable true ,
                                                                    #configurable false}})
                                                 {try
                                                  {%set-property(%ToObject
                                                                   (%this),
                                                                 "currentTcb",
                                                                 %PropAccessorCheck
                                                                   (%this)
                                                                   ["list" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}])}
                                                  catch
                                                  {%ErrorDispatch};
                                                  label %before :
                                                  {rec (%while231 = func
                                                                    (%tst229 , %bdy228 , %after227)
                                                                    {let (%result230 = %ToBoolean
                                                                    (%tst229
                                                                    ()))
                                                                    if (%result230)
                                                                    {label %continue :
                                                                    {%bdy228
                                                                    ()};
                                                                    %after227
                                                                    ();
                                                                    %while231
                                                                    (%tst229,
                                                                    %bdy228,
                                                                    %after227)}
                                                                    else
                                                                    {undefined}})
                                                   %while231(func()
                                                             {prim("!", %EqEq
                                                                    (%PropAccessorCheck
                                                                    (%this)
                                                                    ["currentTcb" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}],
                                                                    null))},
                                                             func()
                                                             {if (%ToBoolean
                                                                    (let (%obj221 = %PropAccessorCheck
                                                                    (%this)["currentTcb" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}])
                                                                    let (%fun222 = %ToObject
                                                                    (%obj221)["isHeldOrSuspended" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}])
                                                                    let (%ftype223 = prim
                                                                    ("typeof", %fun222))
                                                                    if (prim
                                                                    ("!", prim
                                                                    ("stx=", %ftype223 , "function")))
                                                                    {%TypeError
                                                                    ("Not a function")}
                                                                    else
                                                                    {%fun222
                                                                    (%ToObject
                                                                    (%obj221),
                                                                    %mkArgsObj
                                                                    ({[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}))}))
                                                                 {try
                                                                  {%set-property
                                                                    (%ToObject
                                                                    (%this),
                                                                    "currentTcb",
                                                                    %PropAccessorCheck
                                                                    (%PropAccessorCheck
                                                                    (%this)
                                                                    ["currentTcb" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}])
                                                                    ["link" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}])}
                                                                  catch
                                                                  {%ErrorDispatch}}
                                                                 else
                                                                 {try
                                                                  {%set-property
                                                                    (%ToObject
                                                                    (%this),
                                                                    "currentId",
                                                                    %PropAccessorCheck
                                                                    (%PropAccessorCheck
                                                                    (%this)
                                                                    ["currentTcb" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}])
                                                                    ["id" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}])}
                                                                  catch
                                                                  {%ErrorDispatch};
                                                                  try
                                                                  {%set-property
                                                                    (%ToObject
                                                                    (%this),
                                                                    "currentTcb",
                                                                    let (%obj224 = %PropAccessorCheck
                                                                    (%this)["currentTcb" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}])
                                                                    let (%fun225 = %ToObject
                                                                    (%obj224)["run" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}])
                                                                    let (%ftype226 = prim
                                                                    ("typeof", %fun225))
                                                                    if (prim
                                                                    ("!", prim
                                                                    ("stx=", %ftype226 , "function")))
                                                                    {%TypeError
                                                                    ("Not a function")}
                                                                    else
                                                                    {%fun225
                                                                    (%ToObject
                                                                    (%obj224),
                                                                    %mkArgsObj
                                                                    ({[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}))})}
                                                                  catch
                                                                  {%ErrorDispatch}}},
                                                             func()
                                                             {undefined})};
                                                  undefined}}},
                                        #class: "Function",
                                        #extensible: true,]
                                       'prototype' : {#value (%prototype232) ,
                                                      #writable true ,
                                                      #configurable true},
                                       'length' : {#value (0.) ,
                                                   #writable true ,
                                                   #configurable true},
                                       'caller' : {#getter %ThrowTypeError ,
                                                   #setter %ThrowTypeError},
                                       'arguments' : {#getter %ThrowTypeError ,
                                                      #setter %ThrowTypeError}})
                  {%prototype232["constructor" = %thisfunc233 , null];
                   %thisfunc233})}
   catch
   {%ErrorDispatch};
   try
   {%set-property(%ToObject(%PropAccessorCheck(%context["Scheduler" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}])
                              ["prototype" , {[#proto: null,
                                               #class: "Object",
                                               #extensible: true,]}]),
                  "release",
                  let (%prototype217 = {[#proto: %ObjectProto,
                                         #class: "Object",
                                         #extensible: true,]
                                        'constructor' : {#value (undefined) ,
                                                         #writable true ,
                                                         #configurable false}})
                  let (%parent = %context)
                  let (%thisfunc218 = {[#proto: %FunctionProto,
                                        #code: func(%this , %args)
                                               {%args[delete "%new"];
                                                label %ret :
                                                {let (%this = %resolveThis
                                                                (#strict,
                                                                 %this))
                                                 let (%context = let (%tcb208 = undefined)
                                                                 let (%id209 = %args
                                                                    ["0" , null])
                                                                 {[#proto: %parent,
                                                                   #class: "Object",
                                                                   #extensible: true,]
                                                                  'arguments' : {#value (%args) ,
                                                                    #writable true ,
                                                                    #configurable false},
                                                                  'id' : {#getter func
                                                                    (this , args)
                                                                    {label %ret :
                                                                    {break %ret %id209}} ,
                                                                    #setter func
                                                                    (this , args)
                                                                    {label %ret :
                                                                    {break %ret %id209 := args
                                                                    ["0" , {[#proto: %ArrayProto,
                                                                    #class: "Array",
                                                                    #extensible: true,]}]}}},
                                                                  'tcb' : {#getter func
                                                                    (this , args)
                                                                    {label %ret :
                                                                    {break %ret %tcb208}} ,
                                                                    #setter func
                                                                    (this , args)
                                                                    {label %ret :
                                                                    {break %ret %tcb208 := args
                                                                    ["0" , {[#proto: %ArrayProto,
                                                                    #class: "Array",
                                                                    #extensible: true,]}]}}}})
                                                 {%EnvCheckAssign(%context,
                                                                  "tcb",
                                                                  %PropAccessorCheck
                                                                    (%PropAccessorCheck
                                                                    (%this)
                                                                    ["blocks" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}])
                                                                    [%ToString
                                                                    (%context
                                                                    ["id" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}]) , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}],
                                                                  #strict);
                                                  if (%ToBoolean(%EqEq
                                                                   (%context
                                                                    ["tcb" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}],
                                                                    null)))
                                                     {let ($retval = %context
                                                                    ["tcb" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}])
                                                      break %ret $retval}
                                                     else
                                                     {undefined};
                                                  let (%obj212 = %context
                                                                   ["tcb" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}])
                                                  let (%fun213 = %ToObject
                                                                   (%obj212)
                                                                   ["markAsNotHeld" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}])
                                                  let (%ftype214 = prim
                                                                    ("typeof", %fun213))
                                                  if (prim("!", prim("stx=", %ftype214 , "function")))
                                                     {%TypeError("Not a function")}
                                                     else
                                                     {%fun213(%ToObject
                                                                (%obj212),
                                                              %mkArgsObj
                                                                ({[#proto: null,
                                                                   #class: "Object",
                                                                   #extensible: true,]}))};
                                                  if (%ToBoolean(%GreaterThan
                                                                   (%PropAccessorCheck
                                                                    (%context
                                                                    ["tcb" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}])
                                                                    ["priority" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}],
                                                                    %PropAccessorCheck
                                                                    (%PropAccessorCheck
                                                                    (%this)
                                                                    ["currentTcb" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}])
                                                                    ["priority" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}])))
                                                     {let ($retval = %context
                                                                    ["tcb" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}])
                                                      break %ret $retval}
                                                     else
                                                     {let ($retval = %PropAccessorCheck
                                                                    (%this)
                                                                    ["currentTcb" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}])
                                                      break %ret $retval};
                                                  undefined}}},
                                        #class: "Function",
                                        #extensible: true,]
                                       'prototype' : {#value (%prototype217) ,
                                                      #writable true ,
                                                      #configurable true},
                                       'length' : {#value (1.) ,
                                                   #writable true ,
                                                   #configurable true},
                                       'caller' : {#getter %ThrowTypeError ,
                                                   #setter %ThrowTypeError},
                                       'arguments' : {#getter %ThrowTypeError ,
                                                      #setter %ThrowTypeError}})
                  {%prototype217["constructor" = %thisfunc218 , null];
                   %thisfunc218})}
   catch
   {%ErrorDispatch};
   try
   {%set-property(%ToObject(%PropAccessorCheck(%context["Scheduler" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}])
                              ["prototype" , {[#proto: null,
                                               #class: "Object",
                                               #extensible: true,]}]),
                  "holdCurrent",
                  let (%prototype206 = {[#proto: %ObjectProto,
                                         #class: "Object",
                                         #extensible: true,]
                                        'constructor' : {#value (undefined) ,
                                                         #writable true ,
                                                         #configurable false}})
                  let (%parent = %context)
                  let (%thisfunc207 = {[#proto: %FunctionProto,
                                        #code: func(%this , %args)
                                               {%args[delete "%new"];
                                                label %ret :
                                                {let (%this = %resolveThis
                                                                (#strict,
                                                                 %this))
                                                 let (%context = {[#proto: %parent,
                                                                   #class: "Object",
                                                                   #extensible: true,]
                                                                  'arguments' : {#value (%args) ,
                                                                    #writable true ,
                                                                    #configurable false}})
                                                 {%PostIncrement(%PropAccessorCheck
                                                                   (%this),
                                                                 "holdCount");
                                                  let (%obj203 = %PropAccessorCheck
                                                                   (%this)
                                                                   ["currentTcb" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}])
                                                  let (%fun204 = %ToObject
                                                                   (%obj203)
                                                                   ["markAsHeld" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}])
                                                  let (%ftype205 = prim
                                                                    ("typeof", %fun204))
                                                  if (prim("!", prim("stx=", %ftype205 , "function")))
                                                     {%TypeError("Not a function")}
                                                     else
                                                     {%fun204(%ToObject
                                                                (%obj203),
                                                              %mkArgsObj
                                                                ({[#proto: null,
                                                                   #class: "Object",
                                                                   #extensible: true,]}))};
                                                  let ($retval = %PropAccessorCheck
                                                                   (%PropAccessorCheck
                                                                    (%this)
                                                                    ["currentTcb" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}])
                                                                   ["link" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}])
                                                  break %ret $retval;
                                                  undefined}}},
                                        #class: "Function",
                                        #extensible: true,]
                                       'prototype' : {#value (%prototype206) ,
                                                      #writable true ,
                                                      #configurable true},
                                       'length' : {#value (0.) ,
                                                   #writable true ,
                                                   #configurable true},
                                       'caller' : {#getter %ThrowTypeError ,
                                                   #setter %ThrowTypeError},
                                       'arguments' : {#getter %ThrowTypeError ,
                                                      #setter %ThrowTypeError}})
                  {%prototype206["constructor" = %thisfunc207 , null];
                   %thisfunc207})}
   catch
   {%ErrorDispatch};
   try
   {%set-property(%ToObject(%PropAccessorCheck(%context["Scheduler" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}])
                              ["prototype" , {[#proto: null,
                                               #class: "Object",
                                               #extensible: true,]}]),
                  "suspendCurrent",
                  let (%prototype201 = {[#proto: %ObjectProto,
                                         #class: "Object",
                                         #extensible: true,]
                                        'constructor' : {#value (undefined) ,
                                                         #writable true ,
                                                         #configurable false}})
                  let (%parent = %context)
                  let (%thisfunc202 = {[#proto: %FunctionProto,
                                        #code: func(%this , %args)
                                               {%args[delete "%new"];
                                                label %ret :
                                                {let (%this = %resolveThis
                                                                (#strict,
                                                                 %this))
                                                 let (%context = {[#proto: %parent,
                                                                   #class: "Object",
                                                                   #extensible: true,]
                                                                  'arguments' : {#value (%args) ,
                                                                    #writable true ,
                                                                    #configurable false}})
                                                 {let (%obj198 = %PropAccessorCheck
                                                                   (%this)
                                                                   ["currentTcb" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}])
                                                  let (%fun199 = %ToObject
                                                                   (%obj198)
                                                                   ["markAsSuspended" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}])
                                                  let (%ftype200 = prim
                                                                    ("typeof", %fun199))
                                                  if (prim("!", prim("stx=", %ftype200 , "function")))
                                                     {%TypeError("Not a function")}
                                                     else
                                                     {%fun199(%ToObject
                                                                (%obj198),
                                                              %mkArgsObj
                                                                ({[#proto: null,
                                                                   #class: "Object",
                                                                   #extensible: true,]}))};
                                                  let ($retval = %PropAccessorCheck
                                                                   (%this)
                                                                   ["currentTcb" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}])
                                                  break %ret $retval;
                                                  undefined}}},
                                        #class: "Function",
                                        #extensible: true,]
                                       'prototype' : {#value (%prototype201) ,
                                                      #writable true ,
                                                      #configurable true},
                                       'length' : {#value (0.) ,
                                                   #writable true ,
                                                   #configurable true},
                                       'caller' : {#getter %ThrowTypeError ,
                                                   #setter %ThrowTypeError},
                                       'arguments' : {#getter %ThrowTypeError ,
                                                      #setter %ThrowTypeError}})
                  {%prototype201["constructor" = %thisfunc202 , null];
                   %thisfunc202})}
   catch
   {%ErrorDispatch};
   try
   {%set-property(%ToObject(%PropAccessorCheck(%context["Scheduler" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}])
                              ["prototype" , {[#proto: null,
                                               #class: "Object",
                                               #extensible: true,]}]),
                  "queue",
                  let (%prototype196 = {[#proto: %ObjectProto,
                                         #class: "Object",
                                         #extensible: true,]
                                        'constructor' : {#value (undefined) ,
                                                         #writable true ,
                                                         #configurable false}})
                  let (%parent = %context)
                  let (%thisfunc197 = {[#proto: %FunctionProto,
                                        #code: func(%this , %args)
                                               {%args[delete "%new"];
                                                label %ret :
                                                {let (%this = %resolveThis
                                                                (#strict,
                                                                 %this))
                                                 let (%context = let (%t189 = undefined)
                                                                 let (%packet190 = %args
                                                                    ["0" , null])
                                                                 {[#proto: %parent,
                                                                   #class: "Object",
                                                                   #extensible: true,]
                                                                  'arguments' : {#value (%args) ,
                                                                    #writable true ,
                                                                    #configurable false},
                                                                  'packet' : {#getter func
                                                                    (this , args)
                                                                    {label %ret :
                                                                    {break %ret %packet190}} ,
                                                                    #setter func
                                                                    (this , args)
                                                                    {label %ret :
                                                                    {break %ret %packet190 := args
                                                                    ["0" , {[#proto: %ArrayProto,
                                                                    #class: "Array",
                                                                    #extensible: true,]}]}}},
                                                                  't' : {#getter func
                                                                    (this , args)
                                                                    {label %ret :
                                                                    {break %ret %t189}} ,
                                                                    #setter func
                                                                    (this , args)
                                                                    {label %ret :
                                                                    {break %ret %t189 := args
                                                                    ["0" , {[#proto: %ArrayProto,
                                                                    #class: "Array",
                                                                    #extensible: true,]}]}}}})
                                                 {%EnvCheckAssign(%context,
                                                                  "t",
                                                                  %PropAccessorCheck
                                                                    (%PropAccessorCheck
                                                                    (%this)
                                                                    ["blocks" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}])
                                                                    [%ToString
                                                                    (%PropAccessorCheck
                                                                    (%context
                                                                    ["packet" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}])
                                                                    ["id" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}]) , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}],
                                                                  #strict);
                                                  if (%ToBoolean(%EqEq
                                                                   (%context
                                                                    ["t" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}],
                                                                    null)))
                                                     {let ($retval = %context
                                                                    ["t" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}])
                                                      break %ret $retval}
                                                     else
                                                     {undefined};
                                                  %PostIncrement(%PropAccessorCheck
                                                                   (%this),
                                                                 "queueCount");
                                                  try
                                                  {%set-property(%ToObject
                                                                   (%context
                                                                    ["packet" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}]),
                                                                 "link",
                                                                 null)}
                                                  catch
                                                  {%ErrorDispatch};
                                                  try
                                                  {%set-property(%ToObject
                                                                   (%context
                                                                    ["packet" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}]),
                                                                 "id",
                                                                 %PropAccessorCheck
                                                                   (%this)
                                                                   ["currentId" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}])}
                                                  catch
                                                  {%ErrorDispatch};
                                                  let ($retval = let (%obj191 = %context
                                                                    ["t" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}])
                                                                 let (%fun192 = %ToObject
                                                                    (%obj191)["checkPriorityAdd" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}])
                                                                 let (%ftype193 = prim
                                                                    ("typeof", %fun192))
                                                                 if (prim
                                                                    ("!", prim
                                                                    ("stx=", %ftype193 , "function")))
                                                                    {%TypeError
                                                                    ("Not a function")}
                                                                    else
                                                                    {%fun192
                                                                    (%ToObject
                                                                    (%obj191),
                                                                    %mkArgsObj
                                                                    ({[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]
                                                                    '0' : {#value (%PropAccessorCheck
                                                                    (%this)["currentTcb" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}]) ,
                                                                    #writable true ,
                                                                    #configurable true},
                                                                    '1' : {#value (%context
                                                                    ["packet" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}]) ,
                                                                    #writable true ,
                                                                    #configurable true}}))})
                                                  break %ret $retval;
                                                  undefined}}},
                                        #class: "Function",
                                        #extensible: true,]
                                       'prototype' : {#value (%prototype196) ,
                                                      #writable true ,
                                                      #configurable true},
                                       'length' : {#value (1.) ,
                                                   #writable true ,
                                                   #configurable true},
                                       'caller' : {#getter %ThrowTypeError ,
                                                   #setter %ThrowTypeError},
                                       'arguments' : {#getter %ThrowTypeError ,
                                                      #setter %ThrowTypeError}})
                  {%prototype196["constructor" = %thisfunc197 , null];
                   %thisfunc197})}
   catch
   {%ErrorDispatch};
   %EnvCheckAssign(%context,
                   "STATE_RUNNING",
                   0.,
                   #strict);
   %EnvCheckAssign(%context,
                   "STATE_RUNNABLE",
                   1.,
                   #strict);
   %EnvCheckAssign(%context,
                   "STATE_SUSPENDED",
                   2.,
                   #strict);
   %EnvCheckAssign(%context,
                   "STATE_HELD",
                   4.,
                   #strict);
   %EnvCheckAssign(%context,
                   "STATE_SUSPENDED_RUNNABLE",
                   %BitwiseInfix(%context["STATE_SUSPENDED" , {[#proto: null,
                                                                #class: "Object",
                                                                #extensible: true,]}],
                                 %context["STATE_RUNNABLE" , {[#proto: null,
                                                               #class: "Object",
                                                               #extensible: true,]}],
                                 func(%a187 , %b188)
                                 {prim("|", %a187 , %b188)}),
                   #strict);
   %EnvCheckAssign(%context,
                   "STATE_NOT_HELD",
                   %BitwiseNot(%context["STATE_HELD" , {[#proto: null,
                                                         #class: "Object",
                                                         #extensible: true,]}]),
                   #strict);
   try
   {%set-property(%ToObject(%PropAccessorCheck(%context["TaskControlBlock" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}])
                              ["prototype" , {[#proto: null,
                                               #class: "Object",
                                               #extensible: true,]}]),
                  "setRunning",
                  let (%prototype185 = {[#proto: %ObjectProto,
                                         #class: "Object",
                                         #extensible: true,]
                                        'constructor' : {#value (undefined) ,
                                                         #writable true ,
                                                         #configurable false}})
                  let (%parent = %context)
                  let (%thisfunc186 = {[#proto: %FunctionProto,
                                        #code: func(%this , %args)
                                               {%args[delete "%new"];
                                                label %ret :
                                                {let (%this = %resolveThis
                                                                (#strict,
                                                                 %this))
                                                 let (%context = {[#proto: %parent,
                                                                   #class: "Object",
                                                                   #extensible: true,]
                                                                  'arguments' : {#value (%args) ,
                                                                    #writable true ,
                                                                    #configurable false}})
                                                 {try
                                                  {%set-property(%ToObject
                                                                   (%this),
                                                                 "state",
                                                                 %context
                                                                   ["STATE_RUNNING" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}])}
                                                  catch
                                                  {%ErrorDispatch};
                                                  undefined}}},
                                        #class: "Function",
                                        #extensible: true,]
                                       'prototype' : {#value (%prototype185) ,
                                                      #writable true ,
                                                      #configurable true},
                                       'length' : {#value (0.) ,
                                                   #writable true ,
                                                   #configurable true},
                                       'caller' : {#getter %ThrowTypeError ,
                                                   #setter %ThrowTypeError},
                                       'arguments' : {#getter %ThrowTypeError ,
                                                      #setter %ThrowTypeError}})
                  {%prototype185["constructor" = %thisfunc186 , null];
                   %thisfunc186})}
   catch
   {%ErrorDispatch};
   try
   {%set-property(%ToObject(%PropAccessorCheck(%context["TaskControlBlock" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}])
                              ["prototype" , {[#proto: null,
                                               #class: "Object",
                                               #extensible: true,]}]),
                  "markAsNotHeld",
                  let (%prototype183 = {[#proto: %ObjectProto,
                                         #class: "Object",
                                         #extensible: true,]
                                        'constructor' : {#value (undefined) ,
                                                         #writable true ,
                                                         #configurable false}})
                  let (%parent = %context)
                  let (%thisfunc184 = {[#proto: %FunctionProto,
                                        #code: func(%this , %args)
                                               {%args[delete "%new"];
                                                label %ret :
                                                {let (%this = %resolveThis
                                                                (#strict,
                                                                 %this))
                                                 let (%context = {[#proto: %parent,
                                                                   #class: "Object",
                                                                   #extensible: true,]
                                                                  'arguments' : {#value (%args) ,
                                                                    #writable true ,
                                                                    #configurable false}})
                                                 {try
                                                  {%set-property(%ToObject
                                                                   (%this),
                                                                 "state",
                                                                 %BitwiseInfix
                                                                   (%PropAccessorCheck
                                                                    (%this)
                                                                    ["state" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}],
                                                                    %context
                                                                    ["STATE_NOT_HELD" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}],
                                                                    func
                                                                    (%a181 , %b182)
                                                                    {prim
                                                                    ("&", %a181 , %b182)}))}
                                                  catch
                                                  {%ErrorDispatch};
                                                  undefined}}},
                                        #class: "Function",
                                        #extensible: true,]
                                       'prototype' : {#value (%prototype183) ,
                                                      #writable true ,
                                                      #configurable true},
                                       'length' : {#value (0.) ,
                                                   #writable true ,
                                                   #configurable true},
                                       'caller' : {#getter %ThrowTypeError ,
                                                   #setter %ThrowTypeError},
                                       'arguments' : {#getter %ThrowTypeError ,
                                                      #setter %ThrowTypeError}})
                  {%prototype183["constructor" = %thisfunc184 , null];
                   %thisfunc184})}
   catch
   {%ErrorDispatch};
   try
   {%set-property(%ToObject(%PropAccessorCheck(%context["TaskControlBlock" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}])
                              ["prototype" , {[#proto: null,
                                               #class: "Object",
                                               #extensible: true,]}]),
                  "markAsHeld",
                  let (%prototype179 = {[#proto: %ObjectProto,
                                         #class: "Object",
                                         #extensible: true,]
                                        'constructor' : {#value (undefined) ,
                                                         #writable true ,
                                                         #configurable false}})
                  let (%parent = %context)
                  let (%thisfunc180 = {[#proto: %FunctionProto,
                                        #code: func(%this , %args)
                                               {%args[delete "%new"];
                                                label %ret :
                                                {let (%this = %resolveThis
                                                                (#strict,
                                                                 %this))
                                                 let (%context = {[#proto: %parent,
                                                                   #class: "Object",
                                                                   #extensible: true,]
                                                                  'arguments' : {#value (%args) ,
                                                                    #writable true ,
                                                                    #configurable false}})
                                                 {try
                                                  {%set-property(%ToObject
                                                                   (%this),
                                                                 "state",
                                                                 %BitwiseInfix
                                                                   (%PropAccessorCheck
                                                                    (%this)
                                                                    ["state" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}],
                                                                    %context
                                                                    ["STATE_HELD" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}],
                                                                    func
                                                                    (%a177 , %b178)
                                                                    {prim
                                                                    ("|", %a177 , %b178)}))}
                                                  catch
                                                  {%ErrorDispatch};
                                                  undefined}}},
                                        #class: "Function",
                                        #extensible: true,]
                                       'prototype' : {#value (%prototype179) ,
                                                      #writable true ,
                                                      #configurable true},
                                       'length' : {#value (0.) ,
                                                   #writable true ,
                                                   #configurable true},
                                       'caller' : {#getter %ThrowTypeError ,
                                                   #setter %ThrowTypeError},
                                       'arguments' : {#getter %ThrowTypeError ,
                                                      #setter %ThrowTypeError}})
                  {%prototype179["constructor" = %thisfunc180 , null];
                   %thisfunc180})}
   catch
   {%ErrorDispatch};
   try
   {%set-property(%ToObject(%PropAccessorCheck(%context["TaskControlBlock" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}])
                              ["prototype" , {[#proto: null,
                                               #class: "Object",
                                               #extensible: true,]}]),
                  "isHeldOrSuspended",
                  let (%prototype175 = {[#proto: %ObjectProto,
                                         #class: "Object",
                                         #extensible: true,]
                                        'constructor' : {#value (undefined) ,
                                                         #writable true ,
                                                         #configurable false}})
                  let (%parent = %context)
                  let (%thisfunc176 = {[#proto: %FunctionProto,
                                        #code: func(%this , %args)
                                               {%args[delete "%new"];
                                                label %ret :
                                                {let (%this = %resolveThis
                                                                (#strict,
                                                                 %this))
                                                 let (%context = {[#proto: %parent,
                                                                   #class: "Object",
                                                                   #extensible: true,]
                                                                  'arguments' : {#value (%args) ,
                                                                    #writable true ,
                                                                    #configurable false}})
                                                 {let ($retval = let (%l-evaled174 = prim
                                                                    ("!", %EqEq
                                                                    (%BitwiseInfix
                                                                    (%PropAccessorCheck
                                                                    (%this)
                                                                    ["state" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}],
                                                                    %context
                                                                    ["STATE_HELD" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}],
                                                                    func
                                                                    (%a170 , %b171)
                                                                    {prim
                                                                    ("&", %a170 , %b171)}),
                                                                    0.)))
                                                                 if (%ToBoolean
                                                                    (%l-evaled174))
                                                                    {%l-evaled174}
                                                                    else
                                                                    {%EqEq
                                                                    (%PropAccessorCheck
                                                                    (%this)
                                                                    ["state" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}],
                                                                    %context
                                                                    ["STATE_SUSPENDED" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}])})
                                                  break %ret $retval;
                                                  undefined}}},
                                        #class: "Function",
                                        #extensible: true,]
                                       'prototype' : {#value (%prototype175) ,
                                                      #writable true ,
                                                      #configurable true},
                                       'length' : {#value (0.) ,
                                                   #writable true ,
                                                   #configurable true},
                                       'caller' : {#getter %ThrowTypeError ,
                                                   #setter %ThrowTypeError},
                                       'arguments' : {#getter %ThrowTypeError ,
                                                      #setter %ThrowTypeError}})
                  {%prototype175["constructor" = %thisfunc176 , null];
                   %thisfunc176})}
   catch
   {%ErrorDispatch};
   try
   {%set-property(%ToObject(%PropAccessorCheck(%context["TaskControlBlock" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}])
                              ["prototype" , {[#proto: null,
                                               #class: "Object",
                                               #extensible: true,]}]),
                  "markAsSuspended",
                  let (%prototype164 = {[#proto: %ObjectProto,
                                         #class: "Object",
                                         #extensible: true,]
                                        'constructor' : {#value (undefined) ,
                                                         #writable true ,
                                                         #configurable false}})
                  let (%parent = %context)
                  let (%thisfunc165 = {[#proto: %FunctionProto,
                                        #code: func(%this , %args)
                                               {%args[delete "%new"];
                                                label %ret :
                                                {let (%this = %resolveThis
                                                                (#strict,
                                                                 %this))
                                                 let (%context = {[#proto: %parent,
                                                                   #class: "Object",
                                                                   #extensible: true,]
                                                                  'arguments' : {#value (%args) ,
                                                                    #writable true ,
                                                                    #configurable false}})
                                                 {try
                                                  {%set-property(%ToObject
                                                                   (%this),
                                                                 "state",
                                                                 %BitwiseInfix
                                                                   (%PropAccessorCheck
                                                                    (%this)
                                                                    ["state" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}],
                                                                    %context
                                                                    ["STATE_SUSPENDED" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}],
                                                                    func
                                                                    (%a162 , %b163)
                                                                    {prim
                                                                    ("|", %a162 , %b163)}))}
                                                  catch
                                                  {%ErrorDispatch};
                                                  undefined}}},
                                        #class: "Function",
                                        #extensible: true,]
                                       'prototype' : {#value (%prototype164) ,
                                                      #writable true ,
                                                      #configurable true},
                                       'length' : {#value (0.) ,
                                                   #writable true ,
                                                   #configurable true},
                                       'caller' : {#getter %ThrowTypeError ,
                                                   #setter %ThrowTypeError},
                                       'arguments' : {#getter %ThrowTypeError ,
                                                      #setter %ThrowTypeError}})
                  {%prototype164["constructor" = %thisfunc165 , null];
                   %thisfunc165})}
   catch
   {%ErrorDispatch};
   try
   {%set-property(%ToObject(%PropAccessorCheck(%context["TaskControlBlock" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}])
                              ["prototype" , {[#proto: null,
                                               #class: "Object",
                                               #extensible: true,]}]),
                  "markAsRunnable",
                  let (%prototype160 = {[#proto: %ObjectProto,
                                         #class: "Object",
                                         #extensible: true,]
                                        'constructor' : {#value (undefined) ,
                                                         #writable true ,
                                                         #configurable false}})
                  let (%parent = %context)
                  let (%thisfunc161 = {[#proto: %FunctionProto,
                                        #code: func(%this , %args)
                                               {%args[delete "%new"];
                                                label %ret :
                                                {let (%this = %resolveThis
                                                                (#strict,
                                                                 %this))
                                                 let (%context = {[#proto: %parent,
                                                                   #class: "Object",
                                                                   #extensible: true,]
                                                                  'arguments' : {#value (%args) ,
                                                                    #writable true ,
                                                                    #configurable false}})
                                                 {try
                                                  {%set-property(%ToObject
                                                                   (%this),
                                                                 "state",
                                                                 %BitwiseInfix
                                                                   (%PropAccessorCheck
                                                                    (%this)
                                                                    ["state" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}],
                                                                    %context
                                                                    ["STATE_RUNNABLE" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}],
                                                                    func
                                                                    (%a158 , %b159)
                                                                    {prim
                                                                    ("|", %a158 , %b159)}))}
                                                  catch
                                                  {%ErrorDispatch};
                                                  undefined}}},
                                        #class: "Function",
                                        #extensible: true,]
                                       'prototype' : {#value (%prototype160) ,
                                                      #writable true ,
                                                      #configurable true},
                                       'length' : {#value (0.) ,
                                                   #writable true ,
                                                   #configurable true},
                                       'caller' : {#getter %ThrowTypeError ,
                                                   #setter %ThrowTypeError},
                                       'arguments' : {#getter %ThrowTypeError ,
                                                      #setter %ThrowTypeError}})
                  {%prototype160["constructor" = %thisfunc161 , null];
                   %thisfunc161})}
   catch
   {%ErrorDispatch};
   try
   {%set-property(%ToObject(%PropAccessorCheck(%context["TaskControlBlock" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}])
                              ["prototype" , {[#proto: null,
                                               #class: "Object",
                                               #extensible: true,]}]),
                  "run",
                  let (%prototype156 = {[#proto: %ObjectProto,
                                         #class: "Object",
                                         #extensible: true,]
                                        'constructor' : {#value (undefined) ,
                                                         #writable true ,
                                                         #configurable false}})
                  let (%parent = %context)
                  let (%thisfunc157 = {[#proto: %FunctionProto,
                                        #code: func(%this , %args)
                                               {%args[delete "%new"];
                                                label %ret :
                                                {let (%this = %resolveThis
                                                                (#strict,
                                                                 %this))
                                                 let (%context = let (%packet148 = undefined)
                                                                 {[#proto: %parent,
                                                                   #class: "Object",
                                                                   #extensible: true,]
                                                                  'arguments' : {#value (%args) ,
                                                                    #writable true ,
                                                                    #configurable false},
                                                                  'packet' : {#getter func
                                                                    (this , args)
                                                                    {label %ret :
                                                                    {break %ret %packet148}} ,
                                                                    #setter func
                                                                    (this , args)
                                                                    {label %ret :
                                                                    {break %ret %packet148 := args
                                                                    ["0" , {[#proto: %ArrayProto,
                                                                    #class: "Array",
                                                                    #extensible: true,]}]}}}})
                                                 {undefined;
                                                  if (%ToBoolean(%EqEq
                                                                   (%PropAccessorCheck
                                                                    (%this)
                                                                    ["state" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}],
                                                                    %context
                                                                    ["STATE_SUSPENDED_RUNNABLE" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}])))
                                                     {%EnvCheckAssign
                                                        (%context,
                                                         "packet",
                                                         %PropAccessorCheck
                                                           (%this)["queue" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}],
                                                         #strict);
                                                      try
                                                      {%set-property(%ToObject
                                                                    (%this),
                                                                    "queue",
                                                                    %PropAccessorCheck
                                                                    (%context
                                                                    ["packet" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}])
                                                                    ["link" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}])}
                                                      catch
                                                      {%ErrorDispatch};
                                                      if (%ToBoolean(%EqEq
                                                                    (%PropAccessorCheck
                                                                    (%this)
                                                                    ["queue" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}],
                                                                    null)))
                                                         {try
                                                          {%set-property
                                                            (%ToObject
                                                               (%this),
                                                             "state",
                                                             %context
                                                               ["STATE_RUNNING" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}])}
                                                          catch
                                                          {%ErrorDispatch}}
                                                         else
                                                         {try
                                                          {%set-property
                                                            (%ToObject
                                                               (%this),
                                                             "state",
                                                             %context
                                                               ["STATE_RUNNABLE" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}])}
                                                          catch
                                                          {%ErrorDispatch}}}
                                                     else
                                                     {%EnvCheckAssign
                                                       (%context,
                                                        "packet",
                                                        null,
                                                        #strict)};
                                                  let ($retval = let (%obj149 = %PropAccessorCheck
                                                                    (%this)["task" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}])
                                                                 let (%fun150 = %ToObject
                                                                    (%obj149)["run" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}])
                                                                 let (%ftype151 = prim
                                                                    ("typeof", %fun150))
                                                                 if (prim
                                                                    ("!", prim
                                                                    ("stx=", %ftype151 , "function")))
                                                                    {%TypeError
                                                                    ("Not a function")}
                                                                    else
                                                                    {%fun150
                                                                    (%ToObject
                                                                    (%obj149),
                                                                    %mkArgsObj
                                                                    ({[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]
                                                                    '0' : {#value (%context
                                                                    ["packet" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}]) ,
                                                                    #writable true ,
                                                                    #configurable true}}))})
                                                  break %ret $retval;
                                                  undefined}}},
                                        #class: "Function",
                                        #extensible: true,]
                                       'prototype' : {#value (%prototype156) ,
                                                      #writable true ,
                                                      #configurable true},
                                       'length' : {#value (0.) ,
                                                   #writable true ,
                                                   #configurable true},
                                       'caller' : {#getter %ThrowTypeError ,
                                                   #setter %ThrowTypeError},
                                       'arguments' : {#getter %ThrowTypeError ,
                                                      #setter %ThrowTypeError}})
                  {%prototype156["constructor" = %thisfunc157 , null];
                   %thisfunc157})}
   catch
   {%ErrorDispatch};
   try
   {%set-property(%ToObject(%PropAccessorCheck(%context["TaskControlBlock" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}])
                              ["prototype" , {[#proto: null,
                                               #class: "Object",
                                               #extensible: true,]}]),
                  "checkPriorityAdd",
                  let (%prototype146 = {[#proto: %ObjectProto,
                                         #class: "Object",
                                         #extensible: true,]
                                        'constructor' : {#value (undefined) ,
                                                         #writable true ,
                                                         #configurable false}})
                  let (%parent = %context)
                  let (%thisfunc147 = {[#proto: %FunctionProto,
                                        #code: func(%this , %args)
                                               {%args[delete "%new"];
                                                label %ret :
                                                {let (%this = %resolveThis
                                                                (#strict,
                                                                 %this))
                                                 let (%context = let (%task134 = %args
                                                                    ["0" , null])
                                                                 let (%packet135 = %args
                                                                    ["1" , null])
                                                                 {[#proto: %parent,
                                                                   #class: "Object",
                                                                   #extensible: true,]
                                                                  'arguments' : {#value (%args) ,
                                                                    #writable true ,
                                                                    #configurable false},
                                                                  'packet' : {#getter func
                                                                    (this , args)
                                                                    {label %ret :
                                                                    {break %ret %packet135}} ,
                                                                    #setter func
                                                                    (this , args)
                                                                    {label %ret :
                                                                    {break %ret %packet135 := args
                                                                    ["0" , {[#proto: %ArrayProto,
                                                                    #class: "Array",
                                                                    #extensible: true,]}]}}},
                                                                  'task' : {#getter func
                                                                    (this , args)
                                                                    {label %ret :
                                                                    {break %ret %task134}} ,
                                                                    #setter func
                                                                    (this , args)
                                                                    {label %ret :
                                                                    {break %ret %task134 := args
                                                                    ["0" , {[#proto: %ArrayProto,
                                                                    #class: "Array",
                                                                    #extensible: true,]}]}}}})
                                                 {if (%ToBoolean(%EqEq
                                                                   (%PropAccessorCheck
                                                                    (%this)
                                                                    ["queue" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}],
                                                                    null)))
                                                     {try
                                                      {%set-property(%ToObject
                                                                    (%this),
                                                                    "queue",
                                                                    %context
                                                                    ["packet" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}])}
                                                      catch
                                                      {%ErrorDispatch};
                                                      let (%obj140 = %this)
                                                      let (%fun141 = %ToObject
                                                                    (%obj140)
                                                                    ["markAsRunnable" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}])
                                                      let (%ftype142 = prim
                                                                    ("typeof", %fun141))
                                                      if (prim("!", prim
                                                                    ("stx=", %ftype142 , "function")))
                                                         {%TypeError("Not a function")}
                                                         else
                                                         {%fun141(%ToObject
                                                                    (%obj140),
                                                                  %mkArgsObj
                                                                    ({[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}))};
                                                      if (%ToBoolean(%GreaterThan
                                                                    (%PropAccessorCheck
                                                                    (%this)
                                                                    ["priority" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}],
                                                                    %PropAccessorCheck
                                                                    (%context
                                                                    ["task" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}])
                                                                    ["priority" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}])))
                                                         {let ($retval = %this)
                                                          break %ret $retval}
                                                         else
                                                         {undefined}}
                                                     else
                                                     {try
                                                      {%set-property(%ToObject
                                                                    (%this),
                                                                    "queue",
                                                                    let (%obj143 = %context
                                                                    ["packet" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}])
                                                                    let (%fun144 = %ToObject
                                                                    (%obj143)["addTo" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}])
                                                                    let (%ftype145 = prim
                                                                    ("typeof", %fun144))
                                                                    if (prim
                                                                    ("!", prim
                                                                    ("stx=", %ftype145 , "function")))
                                                                    {%TypeError
                                                                    ("Not a function")}
                                                                    else
                                                                    {%fun144
                                                                    (%ToObject
                                                                    (%obj143),
                                                                    %mkArgsObj
                                                                    ({[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]
                                                                    '0' : {#value (%PropAccessorCheck
                                                                    (%this)["queue" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}]) ,
                                                                    #writable true ,
                                                                    #configurable true}}))})}
                                                      catch
                                                      {%ErrorDispatch}};
                                                  let ($retval = %context
                                                                   ["task" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}])
                                                  break %ret $retval;
                                                  undefined}}},
                                        #class: "Function",
                                        #extensible: true,]
                                       'prototype' : {#value (%prototype146) ,
                                                      #writable true ,
                                                      #configurable true},
                                       'length' : {#value (2.) ,
                                                   #writable true ,
                                                   #configurable true},
                                       'caller' : {#getter %ThrowTypeError ,
                                                   #setter %ThrowTypeError},
                                       'arguments' : {#getter %ThrowTypeError ,
                                                      #setter %ThrowTypeError}})
                  {%prototype146["constructor" = %thisfunc147 , null];
                   %thisfunc147})}
   catch
   {%ErrorDispatch};
   try
   {%set-property(%ToObject(%PropAccessorCheck(%context["TaskControlBlock" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}])
                              ["prototype" , {[#proto: null,
                                               #class: "Object",
                                               #extensible: true,]}]),
                  "toString",
                  let (%prototype132 = {[#proto: %ObjectProto,
                                         #class: "Object",
                                         #extensible: true,]
                                        'constructor' : {#value (undefined) ,
                                                         #writable true ,
                                                         #configurable false}})
                  let (%parent = %context)
                  let (%thisfunc133 = {[#proto: %FunctionProto,
                                        #code: func(%this , %args)
                                               {%args[delete "%new"];
                                                label %ret :
                                                {let (%this = %resolveThis
                                                                (#strict,
                                                                 %this))
                                                 let (%context = {[#proto: %parent,
                                                                   #class: "Object",
                                                                   #extensible: true,]
                                                                  'arguments' : {#value (%args) ,
                                                                    #writable true ,
                                                                    #configurable false}})
                                                 {let ($retval = %PrimAdd
                                                                   (%PrimAdd
                                                                    (%PrimAdd
                                                                    (%PrimAdd
                                                                    ("tcb { ",
                                                                    %PropAccessorCheck
                                                                    (%this)
                                                                    ["task" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}]),
                                                                    "@"),
                                                                    %PropAccessorCheck
                                                                    (%this)
                                                                    ["state" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}]),
                                                                    " }"))
                                                  break %ret $retval;
                                                  undefined}}},
                                        #class: "Function",
                                        #extensible: true,]
                                       'prototype' : {#value (%prototype132) ,
                                                      #writable true ,
                                                      #configurable true},
                                       'length' : {#value (0.) ,
                                                   #writable true ,
                                                   #configurable true},
                                       'caller' : {#getter %ThrowTypeError ,
                                                   #setter %ThrowTypeError},
                                       'arguments' : {#getter %ThrowTypeError ,
                                                      #setter %ThrowTypeError}})
                  {%prototype132["constructor" = %thisfunc133 , null];
                   %thisfunc133})}
   catch
   {%ErrorDispatch};
   try
   {%set-property(%ToObject(%PropAccessorCheck(%context["IdleTask" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}])
                              ["prototype" , {[#proto: null,
                                               #class: "Object",
                                               #extensible: true,]}]),
                  "run",
                  let (%prototype122 = {[#proto: %ObjectProto,
                                         #class: "Object",
                                         #extensible: true,]
                                        'constructor' : {#value (undefined) ,
                                                         #writable true ,
                                                         #configurable false}})
                  let (%parent = %context)
                  let (%thisfunc123 = {[#proto: %FunctionProto,
                                        #code: func(%this , %args)
                                               {%args[delete "%new"];
                                                label %ret :
                                                {let (%this = %resolveThis
                                                                (#strict,
                                                                 %this))
                                                 let (%context = let (%packet100 = %args
                                                                    ["0" , null])
                                                                 {[#proto: %parent,
                                                                   #class: "Object",
                                                                   #extensible: true,]
                                                                  'arguments' : {#value (%args) ,
                                                                    #writable true ,
                                                                    #configurable false},
                                                                  'packet' : {#getter func
                                                                    (this , args)
                                                                    {label %ret :
                                                                    {break %ret %packet100}} ,
                                                                    #setter func
                                                                    (this , args)
                                                                    {label %ret :
                                                                    {break %ret %packet100 := args
                                                                    ["0" , {[#proto: %ArrayProto,
                                                                    #class: "Array",
                                                                    #extensible: true,]}]}}}})
                                                 {%PostDecrement(%PropAccessorCheck
                                                                   (%this),
                                                                 "count");
                                                  if (%ToBoolean(%EqEq
                                                                   (%PropAccessorCheck
                                                                    (%this)
                                                                    ["count" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}],
                                                                    0.)))
                                                     {let ($retval = let (%obj119 = %PropAccessorCheck
                                                                    (%this)["scheduler" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}])
                                                                    let (%fun120 = %ToObject
                                                                    (%obj119)["holdCurrent" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}])
                                                                    let (%ftype121 = prim
                                                                    ("typeof", %fun120))
                                                                    if (prim
                                                                    ("!", prim
                                                                    ("stx=", %ftype121 , "function")))
                                                                    {%TypeError
                                                                    ("Not a function")}
                                                                    else
                                                                    {%fun120
                                                                    (%ToObject
                                                                    (%obj119),
                                                                    %mkArgsObj
                                                                    ({[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}))})
                                                      break %ret $retval}
                                                     else
                                                     {undefined};
                                                  if (%ToBoolean(%EqEq
                                                                   (%BitwiseInfix
                                                                    (%PropAccessorCheck
                                                                    (%this)
                                                                    ["v1" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}],
                                                                    1.,
                                                                    func
                                                                    (%a103 , %b104)
                                                                    {prim
                                                                    ("&", %a103 , %b104)}),
                                                                    0.)))
                                                     {try
                                                      {%set-property(%ToObject
                                                                    (%this),
                                                                    "v1",
                                                                    %SignedRightShift
                                                                    (%PropAccessorCheck
                                                                    (%this)
                                                                    ["v1" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}],
                                                                    1.))}
                                                      catch
                                                      {%ErrorDispatch};
                                                      let ($retval = let (%obj105 = %PropAccessorCheck
                                                                    (%this)["scheduler" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}])
                                                                    let (%fun106 = %ToObject
                                                                    (%obj105)["release" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}])
                                                                    let (%ftype107 = prim
                                                                    ("typeof", %fun106))
                                                                    if (prim
                                                                    ("!", prim
                                                                    ("stx=", %ftype107 , "function")))
                                                                    {%TypeError
                                                                    ("Not a function")}
                                                                    else
                                                                    {%fun106
                                                                    (%ToObject
                                                                    (%obj105),
                                                                    %mkArgsObj
                                                                    ({[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]
                                                                    '0' : {#value (%context
                                                                    ["ID_DEVICE_A" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}]) ,
                                                                    #writable true ,
                                                                    #configurable true}}))})
                                                      break %ret $retval}
                                                     else
                                                     {try
                                                      {%set-property(%ToObject
                                                                    (%this),
                                                                    "v1",
                                                                    %BitwiseInfix
                                                                    (%SignedRightShift
                                                                    (%PropAccessorCheck
                                                                    (%this)
                                                                    ["v1" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}],
                                                                    1.),
                                                                    53256.,
                                                                    func
                                                                    (%a113 , %b114)
                                                                    {prim
                                                                    ("^", %a113 , %b114)}))}
                                                      catch
                                                      {%ErrorDispatch};
                                                      let ($retval = let (%obj110 = %PropAccessorCheck
                                                                    (%this)["scheduler" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}])
                                                                    let (%fun111 = %ToObject
                                                                    (%obj110)["release" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}])
                                                                    let (%ftype112 = prim
                                                                    ("typeof", %fun111))
                                                                    if (prim
                                                                    ("!", prim
                                                                    ("stx=", %ftype112 , "function")))
                                                                    {%TypeError
                                                                    ("Not a function")}
                                                                    else
                                                                    {%fun111
                                                                    (%ToObject
                                                                    (%obj110),
                                                                    %mkArgsObj
                                                                    ({[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]
                                                                    '0' : {#value (%context
                                                                    ["ID_DEVICE_B" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}]) ,
                                                                    #writable true ,
                                                                    #configurable true}}))})
                                                      break %ret $retval};
                                                  undefined}}},
                                        #class: "Function",
                                        #extensible: true,]
                                       'prototype' : {#value (%prototype122) ,
                                                      #writable true ,
                                                      #configurable true},
                                       'length' : {#value (1.) ,
                                                   #writable true ,
                                                   #configurable true},
                                       'caller' : {#getter %ThrowTypeError ,
                                                   #setter %ThrowTypeError},
                                       'arguments' : {#getter %ThrowTypeError ,
                                                      #setter %ThrowTypeError}})
                  {%prototype122["constructor" = %thisfunc123 , null];
                   %thisfunc123})}
   catch
   {%ErrorDispatch};
   try
   {%set-property(%ToObject(%PropAccessorCheck(%context["IdleTask" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}])
                              ["prototype" , {[#proto: null,
                                               #class: "Object",
                                               #extensible: true,]}]),
                  "toString",
                  let (%prototype98 = {[#proto: %ObjectProto,
                                        #class: "Object",
                                        #extensible: true,]
                                       'constructor' : {#value (undefined) ,
                                                        #writable true ,
                                                        #configurable false}})
                  let (%parent = %context)
                  let (%thisfunc99 = {[#proto: %FunctionProto,
                                       #code: func(%this , %args)
                                              {%args[delete "%new"];
                                               label %ret :
                                               {let (%this = %resolveThis
                                                               (#strict,
                                                                %this))
                                                let (%context = {[#proto: %parent,
                                                                  #class: "Object",
                                                                  #extensible: true,]
                                                                 'arguments' : {#value (%args) ,
                                                                    #writable true ,
                                                                    #configurable false}})
                                                {let ($retval = "IdleTask")
                                                 break %ret $retval;
                                                 undefined}}},
                                       #class: "Function",
                                       #extensible: true,]
                                      'prototype' : {#value (%prototype98) ,
                                                     #writable true ,
                                                     #configurable true},
                                      'length' : {#value (0.) ,
                                                  #writable true ,
                                                  #configurable true},
                                      'caller' : {#getter %ThrowTypeError ,
                                                  #setter %ThrowTypeError},
                                      'arguments' : {#getter %ThrowTypeError ,
                                                     #setter %ThrowTypeError}})
                  {%prototype98["constructor" = %thisfunc99 , null];
                   %thisfunc99})}
   catch
   {%ErrorDispatch};
   try
   {%set-property(%ToObject(%PropAccessorCheck(%context["DeviceTask" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}])
                              ["prototype" , {[#proto: null,
                                               #class: "Object",
                                               #extensible: true,]}]),
                  "run",
                  let (%prototype96 = {[#proto: %ObjectProto,
                                        #class: "Object",
                                        #extensible: true,]
                                       'constructor' : {#value (undefined) ,
                                                        #writable true ,
                                                        #configurable false}})
                  let (%parent = %context)
                  let (%thisfunc97 = {[#proto: %FunctionProto,
                                       #code: func(%this , %args)
                                              {%args[delete "%new"];
                                               label %ret :
                                               {let (%this = %resolveThis
                                                               (#strict,
                                                                %this))
                                                let (%context = let (%v81 = undefined)
                                                                let (%packet82 = %args
                                                                    ["0" , null])
                                                                {[#proto: %parent,
                                                                  #class: "Object",
                                                                  #extensible: true,]
                                                                 'arguments' : {#value (%args) ,
                                                                    #writable true ,
                                                                    #configurable false},
                                                                 'packet' : {#getter func
                                                                    (this , args)
                                                                    {label %ret :
                                                                    {break %ret %packet82}} ,
                                                                    #setter func
                                                                    (this , args)
                                                                    {label %ret :
                                                                    {break %ret %packet82 := args
                                                                    ["0" , {[#proto: %ArrayProto,
                                                                    #class: "Array",
                                                                    #extensible: true,]}]}}},
                                                                 'v' : {#getter func
                                                                    (this , args)
                                                                    {label %ret :
                                                                    {break %ret %v81}} ,
                                                                    #setter func
                                                                    (this , args)
                                                                    {label %ret :
                                                                    {break %ret %v81 := args
                                                                    ["0" , {[#proto: %ArrayProto,
                                                                    #class: "Array",
                                                                    #extensible: true,]}]}}}})
                                                {if (%ToBoolean(%EqEq
                                                                  (%context
                                                                    ["packet" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}],
                                                                   null)))
                                                    {if (%ToBoolean(%EqEq
                                                                    (%PropAccessorCheck
                                                                    (%this)
                                                                    ["v1" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}],
                                                                    null)))
                                                        {let ($retval = let (%obj90 = %PropAccessorCheck
                                                                    (%this)["scheduler" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}])
                                                                    let (%fun91 = %ToObject
                                                                    (%obj90)["suspendCurrent" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}])
                                                                    let (%ftype92 = prim
                                                                    ("typeof", %fun91))
                                                                    if (prim
                                                                    ("!", prim
                                                                    ("stx=", %ftype92 , "function")))
                                                                    {%TypeError
                                                                    ("Not a function")}
                                                                    else
                                                                    {%fun91
                                                                    (%ToObject
                                                                    (%obj90),
                                                                    %mkArgsObj
                                                                    ({[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}))})
                                                         break %ret $retval}
                                                        else
                                                        {undefined};
                                                     %EnvCheckAssign(%context,
                                                                    "v",
                                                                    %PropAccessorCheck
                                                                    (%this)
                                                                    ["v1" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}],
                                                                    #strict);
                                                     try
                                                     {%set-property(%ToObject
                                                                    (%this),
                                                                    "v1",
                                                                    null)}
                                                     catch
                                                     {%ErrorDispatch};
                                                     let ($retval = let (%obj85 = %PropAccessorCheck
                                                                    (%this)["scheduler" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}])
                                                                    let (%fun86 = %ToObject
                                                                    (%obj85)["queue" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}])
                                                                    let (%ftype87 = prim
                                                                    ("typeof", %fun86))
                                                                    if (prim
                                                                    ("!", prim
                                                                    ("stx=", %ftype87 , "function")))
                                                                    {%TypeError
                                                                    ("Not a function")}
                                                                    else
                                                                    {%fun86
                                                                    (%ToObject
                                                                    (%obj85),
                                                                    %mkArgsObj
                                                                    ({[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]
                                                                    '0' : {#value (%context
                                                                    ["v" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}]) ,
                                                                    #writable true ,
                                                                    #configurable true}}))})
                                                     break %ret $retval}
                                                    else
                                                    {try
                                                     {%set-property(%ToObject
                                                                    (%this),
                                                                    "v1",
                                                                    %context
                                                                    ["packet" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}])}
                                                     catch
                                                     {%ErrorDispatch};
                                                     let ($retval = let (%obj93 = %PropAccessorCheck
                                                                    (%this)["scheduler" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}])
                                                                    let (%fun94 = %ToObject
                                                                    (%obj93)["holdCurrent" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}])
                                                                    let (%ftype95 = prim
                                                                    ("typeof", %fun94))
                                                                    if (prim
                                                                    ("!", prim
                                                                    ("stx=", %ftype95 , "function")))
                                                                    {%TypeError
                                                                    ("Not a function")}
                                                                    else
                                                                    {%fun94
                                                                    (%ToObject
                                                                    (%obj93),
                                                                    %mkArgsObj
                                                                    ({[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}))})
                                                     break %ret $retval};
                                                 undefined}}},
                                       #class: "Function",
                                       #extensible: true,]
                                      'prototype' : {#value (%prototype96) ,
                                                     #writable true ,
                                                     #configurable true},
                                      'length' : {#value (1.) ,
                                                  #writable true ,
                                                  #configurable true},
                                      'caller' : {#getter %ThrowTypeError ,
                                                  #setter %ThrowTypeError},
                                      'arguments' : {#getter %ThrowTypeError ,
                                                     #setter %ThrowTypeError}})
                  {%prototype96["constructor" = %thisfunc97 , null];
                   %thisfunc97})}
   catch
   {%ErrorDispatch};
   try
   {%set-property(%ToObject(%PropAccessorCheck(%context["DeviceTask" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}])
                              ["prototype" , {[#proto: null,
                                               #class: "Object",
                                               #extensible: true,]}]),
                  "toString",
                  let (%prototype79 = {[#proto: %ObjectProto,
                                        #class: "Object",
                                        #extensible: true,]
                                       'constructor' : {#value (undefined) ,
                                                        #writable true ,
                                                        #configurable false}})
                  let (%parent = %context)
                  let (%thisfunc80 = {[#proto: %FunctionProto,
                                       #code: func(%this , %args)
                                              {%args[delete "%new"];
                                               label %ret :
                                               {let (%this = %resolveThis
                                                               (#strict,
                                                                %this))
                                                let (%context = {[#proto: %parent,
                                                                  #class: "Object",
                                                                  #extensible: true,]
                                                                 'arguments' : {#value (%args) ,
                                                                    #writable true ,
                                                                    #configurable false}})
                                                {let ($retval = "DeviceTask")
                                                 break %ret $retval;
                                                 undefined}}},
                                       #class: "Function",
                                       #extensible: true,]
                                      'prototype' : {#value (%prototype79) ,
                                                     #writable true ,
                                                     #configurable true},
                                      'length' : {#value (0.) ,
                                                  #writable true ,
                                                  #configurable true},
                                      'caller' : {#getter %ThrowTypeError ,
                                                  #setter %ThrowTypeError},
                                      'arguments' : {#getter %ThrowTypeError ,
                                                     #setter %ThrowTypeError}})
                  {%prototype79["constructor" = %thisfunc80 , null];
                   %thisfunc80})}
   catch
   {%ErrorDispatch};
   try
   {%set-property(%ToObject(%PropAccessorCheck(%context["WorkerTask" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}])
                              ["prototype" , {[#proto: null,
                                               #class: "Object",
                                               #extensible: true,]}]),
                  "run",
                  let (%prototype77 = {[#proto: %ObjectProto,
                                        #class: "Object",
                                        #extensible: true,]
                                       'constructor' : {#value (undefined) ,
                                                        #writable true ,
                                                        #configurable false}})
                  let (%parent = %context)
                  let (%thisfunc78 = {[#proto: %FunctionProto,
                                       #code: func(%this , %args)
                                              {%args[delete "%new"];
                                               label %ret :
                                               {let (%this = %resolveThis
                                                               (#strict,
                                                                %this))
                                                let (%context = let (%i56 = undefined)
                                                                let (%packet57 = %args
                                                                    ["0" , null])
                                                                {[#proto: %parent,
                                                                  #class: "Object",
                                                                  #extensible: true,]
                                                                 'arguments' : {#value (%args) ,
                                                                    #writable true ,
                                                                    #configurable false},
                                                                 'packet' : {#getter func
                                                                    (this , args)
                                                                    {label %ret :
                                                                    {break %ret %packet57}} ,
                                                                    #setter func
                                                                    (this , args)
                                                                    {label %ret :
                                                                    {break %ret %packet57 := args
                                                                    ["0" , {[#proto: %ArrayProto,
                                                                    #class: "Array",
                                                                    #extensible: true,]}]}}},
                                                                 'i' : {#getter func
                                                                    (this , args)
                                                                    {label %ret :
                                                                    {break %ret %i56}} ,
                                                                    #setter func
                                                                    (this , args)
                                                                    {label %ret :
                                                                    {break %ret %i56 := args
                                                                    ["0" , {[#proto: %ArrayProto,
                                                                    #class: "Array",
                                                                    #extensible: true,]}]}}}})
                                                {if (%ToBoolean(%EqEq
                                                                  (%context
                                                                    ["packet" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}],
                                                                   null)))
                                                    {let ($retval = let (%obj60 = %PropAccessorCheck
                                                                    (%this)["scheduler" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}])
                                                                    let (%fun61 = %ToObject
                                                                    (%obj60)["suspendCurrent" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}])
                                                                    let (%ftype62 = prim
                                                                    ("typeof", %fun61))
                                                                    if (prim
                                                                    ("!", prim
                                                                    ("stx=", %ftype62 , "function")))
                                                                    {%TypeError
                                                                    ("Not a function")}
                                                                    else
                                                                    {%fun61
                                                                    (%ToObject
                                                                    (%obj60),
                                                                    %mkArgsObj
                                                                    ({[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}))})
                                                     break %ret $retval}
                                                    else
                                                    {if (%ToBoolean(%EqEq
                                                                    (%PropAccessorCheck
                                                                    (%this)
                                                                    ["v1" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}],
                                                                    %context
                                                                    ["ID_HANDLER_A" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}])))
                                                        {try
                                                         {%set-property
                                                           (%ToObject(%this),
                                                            "v1",
                                                            %context["ID_HANDLER_B" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}])}
                                                         catch
                                                         {%ErrorDispatch}}
                                                        else
                                                        {try
                                                         {%set-property
                                                           (%ToObject(%this),
                                                            "v1",
                                                            %context["ID_HANDLER_A" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}])}
                                                         catch
                                                         {%ErrorDispatch}};
                                                     try
                                                     {%set-property(%ToObject
                                                                    (%context
                                                                    ["packet" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}]),
                                                                    "id",
                                                                    %PropAccessorCheck
                                                                    (%this)
                                                                    ["v1" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}])}
                                                     catch
                                                     {%ErrorDispatch};
                                                     try
                                                     {%set-property(%ToObject
                                                                    (%context
                                                                    ["packet" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}]),
                                                                    "a1",
                                                                    0.)}
                                                     catch
                                                     {%ErrorDispatch};
                                                     %EnvCheckAssign(%context,
                                                                    "i",
                                                                    0.,
                                                                    #strict);
                                                     label %before :
                                                     {rec (%while74 = func
                                                                    (%tst72 , %bdy71 , %after70)
                                                                    {let (%result73 = %ToBoolean
                                                                    (%tst72()))
                                                                    if (%result73)
                                                                    {label %continue :
                                                                    {%bdy71
                                                                    ()};
                                                                    %after70
                                                                    ();
                                                                    %while74
                                                                    (%tst72,
                                                                    %bdy71,
                                                                    %after70)}
                                                                    else
                                                                    {undefined}})
                                                      %while74(func()
                                                               {%LessThan
                                                                 (%context
                                                                    ["i" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}],
                                                                  %context
                                                                    ["DATA_SIZE" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}])},
                                                               func()
                                                               {%PostIncrement
                                                                  (%PropAccessorCheck
                                                                    (%this),
                                                                   "v2");
                                                                if (%ToBoolean
                                                                    (%GreaterThan
                                                                    (%PropAccessorCheck
                                                                    (%this)
                                                                    ["v2" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}],
                                                                    26.)))
                                                                   {try
                                                                    {%set-property
                                                                    (%ToObject
                                                                    (%this),
                                                                    "v2",
                                                                    1.)}
                                                                    catch
                                                                    {%ErrorDispatch}}
                                                                   else
                                                                   {undefined};
                                                                try
                                                                {%set-property
                                                                  (%ToObject
                                                                    (%PropAccessorCheck
                                                                    (%context
                                                                    ["packet" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}])
                                                                    ["a2" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}]),
                                                                   %ToString
                                                                    (%context
                                                                    ["i" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}]),
                                                                   %PropAccessorCheck
                                                                    (%this)
                                                                    ["v2" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}])}
                                                                catch
                                                                {%ErrorDispatch}},
                                                               func()
                                                               {%PostIncrement
                                                                 (%context,
                                                                  "i")})};
                                                     let ($retval = let (%obj63 = %PropAccessorCheck
                                                                    (%this)["scheduler" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}])
                                                                    let (%fun64 = %ToObject
                                                                    (%obj63)["queue" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}])
                                                                    let (%ftype65 = prim
                                                                    ("typeof", %fun64))
                                                                    if (prim
                                                                    ("!", prim
                                                                    ("stx=", %ftype65 , "function")))
                                                                    {%TypeError
                                                                    ("Not a function")}
                                                                    else
                                                                    {%fun64
                                                                    (%ToObject
                                                                    (%obj63),
                                                                    %mkArgsObj
                                                                    ({[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]
                                                                    '0' : {#value (%context
                                                                    ["packet" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}]) ,
                                                                    #writable true ,
                                                                    #configurable true}}))})
                                                     break %ret $retval};
                                                 undefined}}},
                                       #class: "Function",
                                       #extensible: true,]
                                      'prototype' : {#value (%prototype77) ,
                                                     #writable true ,
                                                     #configurable true},
                                      'length' : {#value (1.) ,
                                                  #writable true ,
                                                  #configurable true},
                                      'caller' : {#getter %ThrowTypeError ,
                                                  #setter %ThrowTypeError},
                                      'arguments' : {#getter %ThrowTypeError ,
                                                     #setter %ThrowTypeError}})
                  {%prototype77["constructor" = %thisfunc78 , null];
                   %thisfunc78})}
   catch
   {%ErrorDispatch};
   try
   {%set-property(%ToObject(%PropAccessorCheck(%context["WorkerTask" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}])
                              ["prototype" , {[#proto: null,
                                               #class: "Object",
                                               #extensible: true,]}]),
                  "toString",
                  let (%prototype54 = {[#proto: %ObjectProto,
                                        #class: "Object",
                                        #extensible: true,]
                                       'constructor' : {#value (undefined) ,
                                                        #writable true ,
                                                        #configurable false}})
                  let (%parent = %context)
                  let (%thisfunc55 = {[#proto: %FunctionProto,
                                       #code: func(%this , %args)
                                              {%args[delete "%new"];
                                               label %ret :
                                               {let (%this = %resolveThis
                                                               (#strict,
                                                                %this))
                                                let (%context = {[#proto: %parent,
                                                                  #class: "Object",
                                                                  #extensible: true,]
                                                                 'arguments' : {#value (%args) ,
                                                                    #writable true ,
                                                                    #configurable false}})
                                                {let ($retval = "WorkerTask")
                                                 break %ret $retval;
                                                 undefined}}},
                                       #class: "Function",
                                       #extensible: true,]
                                      'prototype' : {#value (%prototype54) ,
                                                     #writable true ,
                                                     #configurable true},
                                      'length' : {#value (0.) ,
                                                  #writable true ,
                                                  #configurable true},
                                      'caller' : {#getter %ThrowTypeError ,
                                                  #setter %ThrowTypeError},
                                      'arguments' : {#getter %ThrowTypeError ,
                                                     #setter %ThrowTypeError}})
                  {%prototype54["constructor" = %thisfunc55 , null];
                   %thisfunc55})}
   catch
   {%ErrorDispatch};
   try
   {%set-property(%ToObject(%PropAccessorCheck(%context["HandlerTask" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}])
                              ["prototype" , {[#proto: null,
                                               #class: "Object",
                                               #extensible: true,]}]),
                  "run",
                  let (%prototype52 = {[#proto: %ObjectProto,
                                        #class: "Object",
                                        #extensible: true,]
                                       'constructor' : {#value (undefined) ,
                                                        #writable true ,
                                                        #configurable false}})
                  let (%parent = %context)
                  let (%thisfunc53 = {[#proto: %FunctionProto,
                                       #code: func(%this , %args)
                                              {%args[delete "%new"];
                                               label %ret :
                                               {let (%this = %resolveThis
                                                               (#strict,
                                                                %this))
                                                let (%context = let (%v22 = undefined)
                                                                let (%count23 = undefined)
                                                                let (%packet24 = %args
                                                                    ["0" , null])
                                                                {[#proto: %parent,
                                                                  #class: "Object",
                                                                  #extensible: true,]
                                                                 'arguments' : {#value (%args) ,
                                                                    #writable true ,
                                                                    #configurable false},
                                                                 'packet' : {#getter func
                                                                    (this , args)
                                                                    {label %ret :
                                                                    {break %ret %packet24}} ,
                                                                    #setter func
                                                                    (this , args)
                                                                    {label %ret :
                                                                    {break %ret %packet24 := args
                                                                    ["0" , {[#proto: %ArrayProto,
                                                                    #class: "Array",
                                                                    #extensible: true,]}]}}},
                                                                 'count' : {#getter func
                                                                    (this , args)
                                                                    {label %ret :
                                                                    {break %ret %count23}} ,
                                                                    #setter func
                                                                    (this , args)
                                                                    {label %ret :
                                                                    {break %ret %count23 := args
                                                                    ["0" , {[#proto: %ArrayProto,
                                                                    #class: "Array",
                                                                    #extensible: true,]}]}}},
                                                                 'v' : {#getter func
                                                                    (this , args)
                                                                    {label %ret :
                                                                    {break %ret %v22}} ,
                                                                    #setter func
                                                                    (this , args)
                                                                    {label %ret :
                                                                    {break %ret %v22 := args
                                                                    ["0" , {[#proto: %ArrayProto,
                                                                    #class: "Array",
                                                                    #extensible: true,]}]}}}})
                                                {if (%ToBoolean(prim("!", %EqEq
                                                                    (%context
                                                                    ["packet" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}],
                                                                    null))))
                                                    {if (%ToBoolean(%EqEq
                                                                    (%PropAccessorCheck
                                                                    (%context
                                                                    ["packet" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}])
                                                                    ["kind" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}],
                                                                    %context
                                                                    ["KIND_WORK" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}])))
                                                        {try
                                                         {%set-property
                                                           (%ToObject(%this),
                                                            "v1",
                                                            let (%obj46 = %context
                                                                    ["packet" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}])
                                                            let (%fun47 = %ToObject
                                                                    (%obj46)["addTo" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}])
                                                            let (%ftype48 = prim
                                                                    ("typeof", %fun47))
                                                            if (prim("!", prim
                                                                    ("stx=", %ftype48 , "function")))
                                                               {%TypeError
                                                                 ("Not a function")}
                                                               else
                                                               {%fun47
                                                                 (%ToObject
                                                                    (%obj46),
                                                                  %mkArgsObj
                                                                    ({[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]
                                                                    '0' : {#value (%PropAccessorCheck
                                                                    (%this)["v1" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}]) ,
                                                                    #writable true ,
                                                                    #configurable true}}))})}
                                                         catch
                                                         {%ErrorDispatch}}
                                                        else
                                                        {try
                                                         {%set-property
                                                           (%ToObject(%this),
                                                            "v2",
                                                            let (%obj49 = %context
                                                                    ["packet" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}])
                                                            let (%fun50 = %ToObject
                                                                    (%obj49)["addTo" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}])
                                                            let (%ftype51 = prim
                                                                    ("typeof", %fun50))
                                                            if (prim("!", prim
                                                                    ("stx=", %ftype51 , "function")))
                                                               {%TypeError
                                                                 ("Not a function")}
                                                               else
                                                               {%fun50
                                                                 (%ToObject
                                                                    (%obj49),
                                                                  %mkArgsObj
                                                                    ({[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]
                                                                    '0' : {#value (%PropAccessorCheck
                                                                    (%this)["v2" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}]) ,
                                                                    #writable true ,
                                                                    #configurable true}}))})}
                                                         catch
                                                         {%ErrorDispatch}}}
                                                    else
                                                    {undefined};
                                                 if (%ToBoolean(prim("!", %EqEq
                                                                    (%PropAccessorCheck
                                                                    (%this)
                                                                    ["v1" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}],
                                                                    null))))
                                                    {%EnvCheckAssign(%context,
                                                                    "count",
                                                                    %PropAccessorCheck
                                                                    (%PropAccessorCheck
                                                                    (%this)
                                                                    ["v1" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}])
                                                                    ["a1" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}],
                                                                    #strict);
                                                     undefined;
                                                     if (%ToBoolean(%LessThan
                                                                    (%context
                                                                    ["count" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}],
                                                                    %context
                                                                    ["DATA_SIZE" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}])))
                                                        {if (%ToBoolean
                                                               (prim("!", %EqEq
                                                                    (%PropAccessorCheck
                                                                    (%this)
                                                                    ["v2" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}],
                                                                    null))))
                                                            {%EnvCheckAssign
                                                               (%context,
                                                                "v",
                                                                %PropAccessorCheck
                                                                  (%this)
                                                                  ["v2" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}],
                                                                #strict);
                                                             try
                                                             {%set-property
                                                               (%ToObject
                                                                  (%this),
                                                                "v2",
                                                                %PropAccessorCheck
                                                                  (%PropAccessorCheck
                                                                    (%this)
                                                                    ["v2" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}])
                                                                  ["link" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}])}
                                                             catch
                                                             {%ErrorDispatch};
                                                             try
                                                             {%set-property
                                                               (%ToObject
                                                                  (%context
                                                                    ["v" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}]),
                                                                "a1",
                                                                %PropAccessorCheck
                                                                  (%PropAccessorCheck
                                                                    (%PropAccessorCheck
                                                                    (%this)
                                                                    ["v1" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}])
                                                                    ["a2" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}])
                                                                  [%ToString
                                                                    (%context
                                                                    ["count" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}]) , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}])}
                                                             catch
                                                             {%ErrorDispatch};
                                                             try
                                                             {%set-property
                                                               (%ToObject
                                                                  (%PropAccessorCheck
                                                                    (%this)
                                                                    ["v1" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}]),
                                                                "a1",
                                                                %PrimAdd
                                                                  (%context
                                                                    ["count" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}],
                                                                   1.))}
                                                             catch
                                                             {%ErrorDispatch};
                                                             let ($retval = let (%obj34 = %PropAccessorCheck
                                                                    (%this)["scheduler" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}])
                                                                    let (%fun35 = %ToObject
                                                                    (%obj34)["queue" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}])
                                                                    let (%ftype36 = prim
                                                                    ("typeof", %fun35))
                                                                    if (prim
                                                                    ("!", prim
                                                                    ("stx=", %ftype36 , "function")))
                                                                    {%TypeError
                                                                    ("Not a function")}
                                                                    else
                                                                    {%fun35
                                                                    (%ToObject
                                                                    (%obj34),
                                                                    %mkArgsObj
                                                                    ({[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]
                                                                    '0' : {#value (%context
                                                                    ["v" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}]) ,
                                                                    #writable true ,
                                                                    #configurable true}}))})
                                                             break %ret $retval}
                                                            else
                                                            {undefined}}
                                                        else
                                                        {%EnvCheckAssign
                                                           (%context,
                                                            "v",
                                                            %PropAccessorCheck
                                                              (%this)
                                                              ["v1" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}],
                                                            #strict);
                                                         try
                                                         {%set-property
                                                           (%ToObject(%this),
                                                            "v1",
                                                            %PropAccessorCheck
                                                              (%PropAccessorCheck
                                                                 (%this)
                                                                 ["v1" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}])
                                                              ["link" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}])}
                                                         catch
                                                         {%ErrorDispatch};
                                                         let ($retval = let (%obj39 = %PropAccessorCheck
                                                                    (%this)["scheduler" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}])
                                                                    let (%fun40 = %ToObject
                                                                    (%obj39)["queue" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}])
                                                                    let (%ftype41 = prim
                                                                    ("typeof", %fun40))
                                                                    if (prim
                                                                    ("!", prim
                                                                    ("stx=", %ftype41 , "function")))
                                                                    {%TypeError
                                                                    ("Not a function")}
                                                                    else
                                                                    {%fun40
                                                                    (%ToObject
                                                                    (%obj39),
                                                                    %mkArgsObj
                                                                    ({[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]
                                                                    '0' : {#value (%context
                                                                    ["v" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}]) ,
                                                                    #writable true ,
                                                                    #configurable true}}))})
                                                         break %ret $retval}}
                                                    else
                                                    {undefined};
                                                 let ($retval = let (%obj25 = %PropAccessorCheck
                                                                    (%this)["scheduler" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}])
                                                                let (%fun26 = %ToObject
                                                                    (%obj25)["suspendCurrent" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}])
                                                                let (%ftype27 = prim
                                                                    ("typeof", %fun26))
                                                                if (prim
                                                                    ("!", prim
                                                                    ("stx=", %ftype27 , "function")))
                                                                   {%TypeError
                                                                    ("Not a function")}
                                                                   else
                                                                   {%fun26
                                                                    (%ToObject
                                                                    (%obj25),
                                                                    %mkArgsObj
                                                                    ({[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}))})
                                                 break %ret $retval;
                                                 undefined}}},
                                       #class: "Function",
                                       #extensible: true,]
                                      'prototype' : {#value (%prototype52) ,
                                                     #writable true ,
                                                     #configurable true},
                                      'length' : {#value (1.) ,
                                                  #writable true ,
                                                  #configurable true},
                                      'caller' : {#getter %ThrowTypeError ,
                                                  #setter %ThrowTypeError},
                                      'arguments' : {#getter %ThrowTypeError ,
                                                     #setter %ThrowTypeError}})
                  {%prototype52["constructor" = %thisfunc53 , null];
                   %thisfunc53})}
   catch
   {%ErrorDispatch};
   try
   {%set-property(%ToObject(%PropAccessorCheck(%context["HandlerTask" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}])
                              ["prototype" , {[#proto: null,
                                               #class: "Object",
                                               #extensible: true,]}]),
                  "toString",
                  let (%prototype20 = {[#proto: %ObjectProto,
                                        #class: "Object",
                                        #extensible: true,]
                                       'constructor' : {#value (undefined) ,
                                                        #writable true ,
                                                        #configurable false}})
                  let (%parent = %context)
                  let (%thisfunc21 = {[#proto: %FunctionProto,
                                       #code: func(%this , %args)
                                              {%args[delete "%new"];
                                               label %ret :
                                               {let (%this = %resolveThis
                                                               (#strict,
                                                                %this))
                                                let (%context = {[#proto: %parent,
                                                                  #class: "Object",
                                                                  #extensible: true,]
                                                                 'arguments' : {#value (%args) ,
                                                                    #writable true ,
                                                                    #configurable false}})
                                                {let ($retval = "HandlerTask")
                                                 break %ret $retval;
                                                 undefined}}},
                                       #class: "Function",
                                       #extensible: true,]
                                      'prototype' : {#value (%prototype20) ,
                                                     #writable true ,
                                                     #configurable true},
                                      'length' : {#value (0.) ,
                                                  #writable true ,
                                                  #configurable true},
                                      'caller' : {#getter %ThrowTypeError ,
                                                  #setter %ThrowTypeError},
                                      'arguments' : {#getter %ThrowTypeError ,
                                                     #setter %ThrowTypeError}})
                  {%prototype20["constructor" = %thisfunc21 , null];
                   %thisfunc21})}
   catch
   {%ErrorDispatch};
   %EnvCheckAssign(%context,
                   "DATA_SIZE",
                   4.,
                   #strict);
   try
   {%set-property(%ToObject(%PropAccessorCheck(%context["Packet" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}])
                              ["prototype" , {[#proto: null,
                                               #class: "Object",
                                               #extensible: true,]}]),
                  "addTo",
                  let (%prototype18 = {[#proto: %ObjectProto,
                                        #class: "Object",
                                        #extensible: true,]
                                       'constructor' : {#value (undefined) ,
                                                        #writable true ,
                                                        #configurable false}})
                  let (%parent = %context)
                  let (%thisfunc19 = {[#proto: %FunctionProto,
                                       #code: func(%this , %args)
                                              {%args[delete "%new"];
                                               label %ret :
                                               {let (%this = %resolveThis
                                                               (#strict,
                                                                %this))
                                                let (%context = let (%peek6 = undefined)
                                                                let (%next7 = undefined)
                                                                let (%queue8 = %args
                                                                    ["0" , null])
                                                                {[#proto: %parent,
                                                                  #class: "Object",
                                                                  #extensible: true,]
                                                                 'arguments' : {#value (%args) ,
                                                                    #writable true ,
                                                                    #configurable false},
                                                                 'queue' : {#getter func
                                                                    (this , args)
                                                                    {label %ret :
                                                                    {break %ret %queue8}} ,
                                                                    #setter func
                                                                    (this , args)
                                                                    {label %ret :
                                                                    {break %ret %queue8 := args
                                                                    ["0" , {[#proto: %ArrayProto,
                                                                    #class: "Array",
                                                                    #extensible: true,]}]}}},
                                                                 'next' : {#getter func
                                                                    (this , args)
                                                                    {label %ret :
                                                                    {break %ret %next7}} ,
                                                                    #setter func
                                                                    (this , args)
                                                                    {label %ret :
                                                                    {break %ret %next7 := args
                                                                    ["0" , {[#proto: %ArrayProto,
                                                                    #class: "Array",
                                                                    #extensible: true,]}]}}},
                                                                 'peek' : {#getter func
                                                                    (this , args)
                                                                    {label %ret :
                                                                    {break %ret %peek6}} ,
                                                                    #setter func
                                                                    (this , args)
                                                                    {label %ret :
                                                                    {break %ret %peek6 := args
                                                                    ["0" , {[#proto: %ArrayProto,
                                                                    #class: "Array",
                                                                    #extensible: true,]}]}}}})
                                                {try
                                                 {%set-property(%ToObject
                                                                  (%this),
                                                                "link",
                                                                null)}
                                                 catch
                                                 {%ErrorDispatch};
                                                 if (%ToBoolean(%EqEq
                                                                  (%context
                                                                    ["queue" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}],
                                                                   null)))
                                                    {let ($retval = %this)
                                                     break %ret $retval}
                                                    else
                                                    {undefined};
                                                 undefined;
                                                 %EnvCheckAssign(%context,
                                                                 "next",
                                                                 %context
                                                                   ["queue" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}],
                                                                 #strict);
                                                 label %before :
                                                 {rec (%while15 = func
                                                                    (%tst13 , %bdy12 , %after11)
                                                                  {let (%result14 = %ToBoolean
                                                                    (%tst13()))
                                                                   if (%result14)
                                                                    {label %continue :
                                                                    {%bdy12
                                                                    ()};
                                                                    %after11
                                                                    ();
                                                                    %while15
                                                                    (%tst13,
                                                                    %bdy12,
                                                                    %after11)}
                                                                    else
                                                                    {undefined}})
                                                  %while15(func()
                                                           {prim("!", %EqEq
                                                                    (%EnvCheckAssign
                                                                    (%context,
                                                                    "peek",
                                                                    %PropAccessorCheck
                                                                    (%context
                                                                    ["next" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}])
                                                                    ["link" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}],
                                                                    #strict),
                                                                    null))},
                                                           func()
                                                           {%EnvCheckAssign
                                                             (%context,
                                                              "next",
                                                              %context
                                                                ["peek" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}],
                                                              #strict)},
                                                           func()
                                                           {undefined})};
                                                 try
                                                 {%set-property(%ToObject
                                                                  (%context
                                                                    ["next" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}]),
                                                                "link",
                                                                %this)}
                                                 catch
                                                 {%ErrorDispatch};
                                                 let ($retval = %context
                                                                  ["queue" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}])
                                                 break %ret $retval;
                                                 undefined}}},
                                       #class: "Function",
                                       #extensible: true,]
                                      'prototype' : {#value (%prototype18) ,
                                                     #writable true ,
                                                     #configurable true},
                                      'length' : {#value (1.) ,
                                                  #writable true ,
                                                  #configurable true},
                                      'caller' : {#getter %ThrowTypeError ,
                                                  #setter %ThrowTypeError},
                                      'arguments' : {#getter %ThrowTypeError ,
                                                     #setter %ThrowTypeError}})
                  {%prototype18["constructor" = %thisfunc19 , null];
                   %thisfunc19})}
   catch
   {%ErrorDispatch};
   try
   {%set-property(%ToObject(%PropAccessorCheck(%context["Packet" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}])
                              ["prototype" , {[#proto: null,
                                               #class: "Object",
                                               #extensible: true,]}]),
                  "toString",
                  let (%prototype4 = {[#proto: %ObjectProto,
                                       #class: "Object",
                                       #extensible: true,]
                                      'constructor' : {#value (undefined) ,
                                                       #writable true ,
                                                       #configurable false}})
                  let (%parent = %context)
                  let (%thisfunc5 = {[#proto: %FunctionProto,
                                      #code: func(%this , %args)
                                             {%args[delete "%new"];
                                              label %ret :
                                              {let (%this = %resolveThis
                                                              (#strict,
                                                               %this))
                                               let (%context = {[#proto: %parent,
                                                                 #class: "Object",
                                                                 #extensible: true,]
                                                                'arguments' : {#value (%args) ,
                                                                    #writable true ,
                                                                    #configurable false}})
                                               {let ($retval = "Packet")
                                                break %ret $retval;
                                                undefined}}},
                                      #class: "Function",
                                      #extensible: true,]
                                     'prototype' : {#value (%prototype4) ,
                                                    #writable true ,
                                                    #configurable true},
                                     'length' : {#value (0.) ,
                                                 #writable true ,
                                                 #configurable true},
                                     'caller' : {#getter %ThrowTypeError ,
                                                 #setter %ThrowTypeError},
                                     'arguments' : {#getter %ThrowTypeError ,
                                                    #setter %ThrowTypeError}})
                  {%prototype4["constructor" = %thisfunc5 , null];
                   %thisfunc5})}
   catch
   {%ErrorDispatch};
   let (%fun2 = %context["runRichards" , {[#proto: null,
                                           #class: "Object",
                                           #extensible: true,]}])
   let (%ftype3 = prim("typeof", %fun2))
   if (prim("!", prim("stx=", %ftype3 , "function")))
      {%TypeError("Not a function")}
      else
      {%fun2(undefined,
             %mkArgsObj({[#proto: null, #class: "Object", #extensible: true,]}))};
   "success"}
