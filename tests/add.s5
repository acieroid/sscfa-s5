// Expected: 2.
{let (%ObjectProto = {[#proto: null, #class: "Object", #extensible: true,]})
     {let (%global = {[#proto: %ObjectProto,
                       #class: "Object",
                       #extensible: true,]})
          {let (%globalContext = {[#proto: %global,
                                   #class: "Object",
                                   #extensible: true,]})
               {let (%ToPrimitiveNum = func(obj)
                                       {{let (check = func(o , str)
                                                      {{let (valueOf = o[str , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}])
                                                            if (prim("stx=", prim
                                                                    ("typeof", valueOf) , "function"))
                                                               {{let (str = valueOf
                                                                    (o,
                                                                    {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}))
                                                                    if (prim
                                                                    ("primitive?", str))
                                                                    {str}
                                                                    else
                                                                    {null}}}
                                                               else
                                                               {null}}})
                                             {let (r1 = check(obj,
                                                              "valueOf"))
                                                  if (if (prim("stx=", r1 , null))
                                                         {false}
                                                         else
                                                         {true})
                                                     {r1}
                                                     else
                                                     {{let (r2 = check
                                                                   (obj,
                                                                    "toString"))
                                                           if (if (prim
                                                                    ("stx=", r2 , null))
                                                                  {false}
                                                                  else
                                                                  {true})
                                                              {r2}
                                                              else
                                                              {%TypeError
                                                                ("valueOf and toString both absent in toPrimitiveNum")}}}}}})
                    {let (%ToPrimitiveStr = func(obj)
                                            {label ret :
                                             {{let (toString = obj["toString" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}])
                                                   if (prim("stx=", prim
                                                                    ("typeof", toString) , "function"))
                                                      {{let (str = toString
                                                                    (obj,
                                                                    {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}))
                                                            if (prim("primitive?", str))
                                                               {break ret str}
                                                               else
                                                               {null}}}
                                                      else
                                                      {undefined}};
                                              {let (valueOf = obj["valueOf" , {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}])
                                                   if (prim("stx=", prim
                                                                    ("typeof", valueOf) , "function"))
                                                      {{let (str = valueOf
                                                                    (obj,
                                                                    {[#proto: null,
                                                                    #class: "Object",
                                                                    #extensible: true,]}))
                                                            if (prim("primitive?", str))
                                                               {break ret str}
                                                               else
                                                               {null}}}
                                                      else
                                                      {undefined}};
                                              %TypeError("valueOf and toString both absent in toPrimitiveStr")}})
                         {let (%ToPrimitiveHint = func(val , hint)
                                                  {{let (t = prim("typeof", val))
                                                        if ({let (%or = prim
                                                                    ("stx=", t , "function"))
                                                                 if (%or)
                                                                    {%or}
                                                                    else
                                                                    {prim
                                                                    ("stx=", t , "object")}})
                                                           {if (prim("stx=", hint , "string"))
                                                               {%ToPrimitiveStr
                                                                 (val)}
                                                               else
                                                               {%ToPrimitiveNum
                                                                 (val)}}
                                                           else
                                                           {val}}})
                              {let (%ToPrimitive = func(val)
                                                   {%ToPrimitiveHint(val,
                                                                    "number")})
                                   {let (%PrimAdd = func(l , r)
                                                    {{let (l = %ToPrimitive
                                                                 (l))
                                                          {let (r = %ToPrimitive
                                                                    (r))
                                                               if (prim
                                                                    ("stx=", prim
                                                                    ("typeof", l) , "string"))
                                                                  {{let (lstr = prim
                                                                    ("prim->str", l))
                                                                    {let (rstr = prim
                                                                    ("prim->str", r))
                                                                    prim
                                                                    ("string+", lstr , rstr)}}}
                                                                  else
                                                                  if (prim
                                                                    ("stx=", prim
                                                                    ("typeof", r) , "string"))
                                                                    {{let (lstr = prim
                                                                    ("prim->str", l))
                                                                    {let (rstr = prim
                                                                    ("prim->str", r))
                                                                    prim
                                                                    ("string+", lstr , rstr)}}}
                                                                    else
                                                                    {{let (lnum = prim
                                                                    ("prim->num", l))
                                                                    {let (rnum = prim
                                                                    ("prim->num", r))
                                                                    prim
                                                                    ("+", lnum , rnum)}}}}}})
                                        {let (%this = %global)
                                             {let (%strictContext = %globalContext)
                                                  {let (%nonstrictContext = %globalContext)
                                                       {let (%context = %nonstrictContext)
                                                            {let (#strict = false)
                                                                 %PrimAdd
                                                                   (1.,
                                                                    1.)}}}}}}}}}}}}}
